{
    "info": {
        "added": 1629861154.284556, 
        "started": 1629866387.453474, 
        "duration": 65, 
        "ended": 1629866452.660138, 
        "owner": null, 
        "score": 10, 
        "id": 2367258, 
        "category": "file", 
        "git": {
            "head": "", 
            "fetch_head": ""
        }, 
        "monitor": null, 
        "package": "bc", 
        "route": "internet", 
        "custom": null, 
        "machine": {
            "status": "stopped", 
            "name": "win7x641", 
            "label": "win7x641", 
            "platform": "windows", 
            "manager": "VirtualBox", 
            "started_on": "2021-08-25 04:39:53", 
            "shutdown_on": "2021-08-25 04:40:52"
        }, 
        "platform": "windows", 
        "version": "2.0.7", 
        "options": "procmemdump=yes,route=internet"
    }, 
    "signatures": [
        {
            "families": [], 
            "description": "File has been identified by 9 AntiVirus engine on IRMA as malicious", 
            "severity": 60, 
            "ttp": {}, 
            "markcount": 9, 
            "references": [], 
            "marks": [
                {
                    "category": "Avast Core Security (Linux)", 
                    "ioc": "ELF:Ifwatch-B [Trj]", 
                    "type": "ioc", 
                    "description": null
                }, 
                {
                    "category": "ESET NOD32 Antivirus (Linux)", 
                    "ioc": "Linux/Wifatch.F trojan", 
                    "type": "ioc", 
                    "description": null
                }, 
                {
                    "category": "GData (Windows)", 
                    "ioc": "Virus: Trojan.Linux.Agent.AKV (Engine A)", 
                    "type": "ioc", 
                    "description": null
                }, 
                {
                    "category": "Kaspersky (Windows)", 
                    "ioc": "HEUR:Trojan.Linux.Wifatch.a", 
                    "type": "ioc", 
                    "description": null
                }, 
                {
                    "category": "Sophos Anti-Virus (Linux)", 
                    "ioc": "Mal/Generic-S", 
                    "type": "ioc", 
                    "description": null
                }, 
                {
                    "category": "DrWeb Antivirus (Linux)", 
                    "ioc": "Linux.Wifatch.2", 
                    "type": "ioc", 
                    "description": null
                }, 
                {
                    "category": "ClamAV (Linux)", 
                    "ioc": "Unix.Malware.Agent-7437390-0", 
                    "type": "ioc", 
                    "description": null
                }, 
                {
                    "category": "eScan Antivirus (Linux)", 
                    "ioc": "Trojan.Linux.Agent.AKV(DB)", 
                    "type": "ioc", 
                    "description": null
                }, 
                {
                    "category": "Bitdefender Antivirus Scanner (Linux)", 
                    "ioc": "Trojan.Linux.Agent.AKV", 
                    "type": "ioc", 
                    "description": null
                }
            ], 
            "name": "antivirus_irma"
        }, 
        {
            "families": [], 
            "description": "File has been identified by 25 AntiVirus engines on VirusTotal as malicious", 
            "severity": 60, 
            "ttp": {}, 
            "markcount": 25, 
            "references": [], 
            "marks": [
                {
                    "category": "Lionic", 
                    "ioc": "Trojan.Linux.Wifatch.4!c", 
                    "type": "ioc", 
                    "description": null
                }, 
                {
                    "category": "ClamAV", 
                    "ioc": "Unix.Malware.Agent-7437390-0", 
                    "type": "ioc", 
                    "description": null
                }, 
                {
                    "category": "FireEye", 
                    "ioc": "Trojan.Linux.Agent.AKV", 
                    "type": "ioc", 
                    "description": null
                }, 
                {
                    "category": "Symantec", 
                    "ioc": "Linux.Wifatch", 
                    "type": "ioc", 
                    "description": null
                }, 
                {
                    "category": "ESET-NOD32", 
                    "ioc": "Linux/Wifatch.F", 
                    "type": "ioc", 
                    "description": null
                }, 
                {
                    "category": "Avast", 
                    "ioc": "ELF:Ifwatch-B [Trj]", 
                    "type": "ioc", 
                    "description": null
                }, 
                {
                    "category": "Kaspersky", 
                    "ioc": "HEUR:Trojan.Linux.Wifatch.a", 
                    "type": "ioc", 
                    "description": null
                }, 
                {
                    "category": "BitDefender", 
                    "ioc": "Trojan.Linux.Agent.AKV", 
                    "type": "ioc", 
                    "description": null
                }, 
                {
                    "category": "NANO-Antivirus", 
                    "ioc": "Trojan.Wifatch.ebdaxj", 
                    "type": "ioc", 
                    "description": null
                }, 
                {
                    "category": "MicroWorld-eScan", 
                    "ioc": "Trojan.Linux.Agent.AKV", 
                    "type": "ioc", 
                    "description": null
                }, 
                {
                    "category": "Tencent", 
                    "ioc": "Linux.Trojan.Wifatch.Sxee", 
                    "type": "ioc", 
                    "description": null
                }, 
                {
                    "category": "Ad-Aware", 
                    "ioc": "Trojan.Linux.Agent.AKV", 
                    "type": "ioc", 
                    "description": null
                }, 
                {
                    "category": "Emsisoft", 
                    "ioc": "Trojan.Linux.Agent.AKV (B)", 
                    "type": "ioc", 
                    "description": null
                }, 
                {
                    "category": "DrWeb", 
                    "ioc": "Linux.Wifatch.2", 
                    "type": "ioc", 
                    "description": null
                }, 
                {
                    "category": "Zillya", 
                    "ioc": "Trojan.Wifatch.Linux.9", 
                    "type": "ioc", 
                    "description": null
                }, 
                {
                    "category": "TrendMicro", 
                    "ioc": "Trojan.Linux.WIFATCH.USELVBR21", 
                    "type": "ioc", 
                    "description": null
                }, 
                {
                    "category": "Avast-Mobile", 
                    "ioc": "ELF:Ifwatch-B [Trj]", 
                    "type": "ioc", 
                    "description": null
                }, 
                {
                    "category": "Jiangmin", 
                    "ioc": "Trojan.Linux.ac", 
                    "type": "ioc", 
                    "description": null
                }, 
                {
                    "category": "MAX", 
                    "ioc": "malware (ai score=99)", 
                    "type": "ioc", 
                    "description": null
                }, 
                {
                    "category": "Microsoft", 
                    "ioc": "Trojan:Script/Wacatac.B!ml", 
                    "type": "ioc", 
                    "description": null
                }, 
                {
                    "category": "ZoneAlarm", 
                    "ioc": "HEUR:Trojan.Linux.Wifatch.a", 
                    "type": "ioc", 
                    "description": null
                }, 
                {
                    "category": "GData", 
                    "ioc": "Trojan.Linux.Agent.AKV", 
                    "type": "ioc", 
                    "description": null
                }, 
                {
                    "category": "ALYac", 
                    "ioc": "Trojan.Linux.Agent.AKV", 
                    "type": "ioc", 
                    "description": null
                }, 
                {
                    "category": "Ikarus", 
                    "ioc": "Linux.Wifatch", 
                    "type": "ioc", 
                    "description": null
                }, 
                {
                    "category": "AVG", 
                    "ioc": "ELF:Ifwatch-B [Trj]", 
                    "type": "ioc", 
                    "description": null
                }
            ], 
            "name": "antivirus_virustotal"
        }
    ], 
    "target": {
        "category": "file", 
        "file": {
            "mimetype": "application/x-executable", 
            "yara": [], 
            "sha1": "ed6a790ae9da25d34775723852cd01a9a0280897", 
            "name": "VirusShare_c82800fecabb67d597209bdc1f35fdd7", 
            "type": "ELF 32-bit MSB executable, ARM, EABI4 version 1 (SYSV), statically linked, no section header", 
            "sha256": "52eb7b862f6558288854710b5d7f61e9275c1068ac3aaa77ac8ffdb962983fe5", 
            "urls": [
                "http://software.schmorp.de/pkg/AnyEvent)", 
                "http://www.perl.org/", 
                "https://matt.ucc.asn.au/dropbear/dropbear.html", 
                "http://software.schmorp.de/pkg/AnyEvent-Fork", 
                "http://anyevent.schmorp.de"
            ], 
            "crc32": "590413D6", 
            "path": "/srv/cuckoo/cwd/storage/binaries/52eb7b862f6558288854710b5d7f61e9275c1068ac3aaa77ac8ffdb962983fe5", 
            "ssdeep": null, 
            "size": 2010188, 
            "sha512": "bdf9322b083c097e2c7742c0e3caac5082bfaa922fd3c290367e499df0c41776ba34c6b378bb045e3efcefae4d10084164d9a40a4e22a2c17080df4bef50e48d", 
            "md5": "c82800fecabb67d597209bdc1f35fdd7"
        }, 
        "custom": null
    }, 
    "irma": {
        "status": 1, 
        "probes_finished": 16, 
        "scan_id": "0b45839c-b540-40a2-a9ba-d852180a2a4c", 
        "parent_file_sha256": null, 
        "name": "52eb7b862f6558288854710b5d7f61e9275c1068ac3aaa77ac8ffdb962983fe5", 
        "scan_date": 1629855918, 
        "other_results": [], 
        "submitter": "cli", 
        "probes_total": 16, 
        "file_infos": {
            "mimetype": "ELF 32-bit MSB executable, ARM, EABI4 version 1 (SYSV)", 
            "sha1": "ed6a790ae9da25d34775723852cd01a9a0280897", 
            "tags": [], 
            "timestamp_first_scan": 1628542486.46, 
            "timestamp_last_scan": 1629855927.27, 
            "sha256": "52eb7b862f6558288854710b5d7f61e9275c1068ac3aaa77ac8ffdb962983fe5", 
            "md5": "c82800fecabb67d597209bdc1f35fdd7", 
            "size": 2010188
        }, 
        "probe_results": {
            "antivirus": {
                "Avast Core Security (Linux)": {
                    "status": 1, 
                    "duration": 0.05, 
                    "version": "3.0.3", 
                    "results": "ELF:Ifwatch-B [Trj]", 
                    "virus_database_version": "unavailable"
                }, 
                "F-Secure Antivirus (Linux)": {
                    "status": 0, 
                    "duration": 0.03, 
                    "version": "11.10", 
                    "results": null, 
                    "virus_database_version": "2021-08-12_02"
                }, 
                "Windows Defender (Windows)": {
                    "status": 0, 
                    "duration": 0.06, 
                    "version": "1.1.18400.4", 
                    "results": null, 
                    "virus_database_version": "1.345.302.0"
                }, 
                "Comodo Antivirus (Linux)": {
                    "status": 0, 
                    "duration": 2.05, 
                    "version": "1.1.268025.1", 
                    "results": null, 
                    "virus_database_version": "2021-08-12"
                }, 
                "ESET NOD32 Antivirus (Linux)": {
                    "status": 1, 
                    "duration": 3.85, 
                    "version": "4.0.96", 
                    "results": "Linux/Wifatch.F trojan", 
                    "virus_database_version": "61149108-1e731 (2021-08-12)"
                }, 
                "GData (Windows)": {
                    "status": 1, 
                    "duration": 0.36, 
                    "version": "5.5.20197.1358", 
                    "results": "Virus: Trojan.Linux.Agent.AKV (Engine A)", 
                    "virus_database_version": "unavailable"
                }, 
                "Forticlient (Linux)": {
                    "status": 0, 
                    "duration": 3.05, 
                    "version": "unavailable", 
                    "results": null, 
                    "virus_database_version": "unavailable"
                }, 
                "Avira (Windows)": {
                    "status": 0, 
                    "duration": 4.03, 
                    "version": "8.3.64.2", 
                    "results": null, 
                    "virus_database_version": "8.18.38.198"
                }, 
                "Kaspersky (Windows)": {
                    "status": 1, 
                    "duration": 0.98, 
                    "version": "21.3", 
                    "results": "HEUR:Trojan.Linux.Wifatch.a", 
                    "virus_database_version": "2021-08-10 18:48:00 (full)"
                }, 
                "McAfee CLI scanner (Linux)": {
                    "status": 0, 
                    "duration": 5.1, 
                    "version": "6.0.6.653", 
                    "results": null, 
                    "virus_database_version": "10073"
                }, 
                "Sophos Anti-Virus (Linux)": {
                    "status": 1, 
                    "duration": 6.52, 
                    "version": "5.74.0", 
                    "results": "Mal/Generic-S", 
                    "virus_database_version": "5.86 (03 August 2021)"
                }, 
                "DrWeb Antivirus (Linux)": {
                    "status": 1, 
                    "duration": 0.1, 
                    "version": "11.1.9.2103151924", 
                    "results": "Linux.Wifatch.2", 
                    "virus_database_version": "unavailable"
                }, 
                "ClamAV (Linux)": {
                    "status": 1, 
                    "duration": 0.17, 
                    "version": "0.103.2", 
                    "results": "Unix.Malware.Agent-7437390-0", 
                    "virus_database_version": "26260"
                }, 
                "eScan Antivirus (Linux)": {
                    "status": 1, 
                    "duration": 3.99, 
                    "version": "7.0.21", 
                    "results": "Trojan.Linux.Agent.AKV(DB)", 
                    "virus_database_version": "7.89440 (12/08/2021)"
                }, 
                "Emsisoft Commandline Scanner (Windows)": {
                    "status": 0, 
                    "duration": 0.25, 
                    "version": "2021.1.0.10606", 
                    "results": null, 
                    "virus_database_version": "unavailable"
                }, 
                "Bitdefender Antivirus Scanner (Linux)": {
                    "status": 1, 
                    "duration": 5.85, 
                    "version": "7.90123", 
                    "results": "Trojan.Linux.Agent.AKV", 
                    "virus_database_version": null
                }
            }
        }, 
        "path": "", 
        "result_id": "f3b9a5a8-fe8f-40b2-a989-4f5a8600cc66", 
        "file_sha256": "52eb7b862f6558288854710b5d7f61e9275c1068ac3aaa77ac8ffdb962983fe5"
    }, 
    "suricata": {
        "tls": [], 
        "files": [], 
        "alerts": [], 
        "http": []
    }, 
    "virustotal": {
        "scans": {
            "Bkav": {
                "detected": false, 
                "version": "1.3.0.9899", 
                "result": null, 
                "normalized": [], 
                "update": "20210429"
            }, 
            "Lionic": {
                "detected": true, 
                "version": "4.2", 
                "result": "Trojan.Linux.Wifatch.4!c", 
                "normalized": [
                    "Linux", 
                    "Wifatch"
                ], 
                "update": "20210502"
            }, 
            "ClamAV": {
                "detected": true, 
                "version": "0.103.2.0", 
                "result": "Unix.Malware.Agent-7437390-0", 
                "normalized": [
                    "Unix"
                ], 
                "update": "20210501"
            }, 
            "FireEye": {
                "detected": true, 
                "version": "32.44.1.0", 
                "result": "Trojan.Linux.Agent.AKV", 
                "normalized": [
                    "Linux"
                ], 
                "update": "20210502"
            }, 
            "CAT-QuickHeal": {
                "detected": false, 
                "version": "14.00", 
                "result": null, 
                "normalized": [], 
                "update": "20210501"
            }, 
            "McAfee": {
                "detected": false, 
                "version": "6.0.6.653", 
                "result": null, 
                "normalized": [], 
                "update": "20210501"
            }, 
            "Malwarebytes": {
                "detected": false, 
                "version": "4.2.2.27", 
                "result": null, 
                "normalized": [], 
                "update": "20210501"
            }, 
            "VIPRE": {
                "detected": false, 
                "version": "92250", 
                "result": null, 
                "normalized": [], 
                "update": "20210502"
            }, 
            "Sangfor": {
                "detected": false, 
                "version": "2.9.0.0", 
                "result": null, 
                "normalized": [], 
                "update": "20210416"
            }, 
            "K7AntiVirus": {
                "detected": false, 
                "version": "11.180.37053", 
                "result": null, 
                "normalized": [], 
                "update": "20210502"
            }, 
            "K7GW": {
                "detected": false, 
                "version": "11.180.37053", 
                "result": null, 
                "normalized": [], 
                "update": "20210502"
            }, 
            "Arcabit": {
                "detected": false, 
                "version": "1.0.0.886", 
                "result": null, 
                "normalized": [], 
                "update": "20210502"
            }, 
            "Baidu": {
                "detected": false, 
                "version": "1.0.0.2", 
                "result": null, 
                "normalized": [], 
                "update": "20190318"
            }, 
            "Cyren": {
                "detected": false, 
                "version": "6.3.0.2", 
                "result": null, 
                "normalized": [], 
                "update": "20210502"
            }, 
            "Symantec": {
                "detected": true, 
                "version": "1.14.0.0", 
                "result": "Linux.Wifatch", 
                "normalized": [
                    "Linux", 
                    "Wifatch"
                ], 
                "update": "20210501"
            }, 
            "ESET-NOD32": {
                "detected": true, 
                "version": "23226", 
                "result": "Linux/Wifatch.F", 
                "normalized": [
                    "Linux", 
                    "Wifatch"
                ], 
                "update": "20210501"
            }, 
            "TrendMicro-HouseCall": {
                "detected": false, 
                "version": "10.0.0.1040", 
                "result": null, 
                "normalized": [], 
                "update": "20210502"
            }, 
            "Avast": {
                "detected": true, 
                "version": "21.1.5827.0", 
                "result": "ELF:Ifwatch-B [Trj]", 
                "normalized": [
                    "Ifwatch"
                ], 
                "update": "20210502"
            }, 
            "Cynet": {
                "detected": false, 
                "version": "4.0.0.27", 
                "result": null, 
                "normalized": [], 
                "update": "20210502"
            }, 
            "Kaspersky": {
                "detected": true, 
                "version": "21.0.1.45", 
                "result": "HEUR:Trojan.Linux.Wifatch.a", 
                "normalized": [
                    "Linux", 
                    "Wifatch"
                ], 
                "update": "20210501"
            }, 
            "BitDefender": {
                "detected": true, 
                "version": "7.2", 
                "result": "Trojan.Linux.Agent.AKV", 
                "normalized": [
                    "Linux"
                ], 
                "update": "20210502"
            }, 
            "NANO-Antivirus": {
                "detected": true, 
                "version": "1.0.146.25279", 
                "result": "Trojan.Wifatch.ebdaxj", 
                "normalized": [
                    "Wifatch", 
                    "ebdaxj"
                ], 
                "update": "20210502"
            }, 
            "SUPERAntiSpyware": {
                "detected": false, 
                "version": "5.6.0.1032", 
                "result": null, 
                "normalized": [], 
                "update": "20210430"
            }, 
            "MicroWorld-eScan": {
                "detected": true, 
                "version": "14.0.409.0", 
                "result": "Trojan.Linux.Agent.AKV", 
                "normalized": [
                    "Linux"
                ], 
                "update": "20210502"
            }, 
            "Tencent": {
                "detected": true, 
                "version": "1.0.0.1", 
                "result": "Linux.Trojan.Wifatch.Sxee", 
                "normalized": [
                    "Linux", 
                    "Wifatch", 
                    "Sxee"
                ], 
                "update": "20210502"
            }, 
            "Ad-Aware": {
                "detected": true, 
                "version": "3.0.21.179", 
                "result": "Trojan.Linux.Agent.AKV", 
                "normalized": [
                    "Linux"
                ], 
                "update": "20210502"
            }, 
            "Emsisoft": {
                "detected": true, 
                "version": "2018.12.0.1641", 
                "result": "Trojan.Linux.Agent.AKV (B)", 
                "normalized": [
                    "Linux"
                ], 
                "update": "20210502"
            }, 
            "Comodo": {
                "detected": false, 
                "version": "33490", 
                "result": null, 
                "normalized": [], 
                "update": "20210501"
            }, 
            "F-Secure": {
                "detected": false, 
                "version": "12.0.86.52", 
                "result": null, 
                "normalized": [], 
                "update": "20210331"
            }, 
            "DrWeb": {
                "detected": true, 
                "version": "7.0.49.9080", 
                "result": "Linux.Wifatch.2", 
                "normalized": [
                    "Linux", 
                    "Wifatch"
                ], 
                "update": "20210502"
            }, 
            "Zillya": {
                "detected": true, 
                "version": "2.0.0.4354", 
                "result": "Trojan.Wifatch.Linux.9", 
                "normalized": [
                    "Wifatch", 
                    "Linux"
                ], 
                "update": "20210430"
            }, 
            "TrendMicro": {
                "detected": true, 
                "version": "11.0.0.1006", 
                "result": "Trojan.Linux.WIFATCH.USELVBR21", 
                "normalized": [
                    "Linux", 
                    "WIFATCH", 
                    "USELVBR21"
                ], 
                "update": "20210330"
            }, 
            "McAfee-GW-Edition": {
                "detected": false, 
                "version": "v2019.1.2+3728", 
                "result": null, 
                "normalized": [], 
                "update": "20210501"
            }, 
            "CMC": {
                "detected": false, 
                "version": "2.10.2019.1", 
                "result": null, 
                "normalized": [], 
                "update": "20210327"
            }, 
            "Sophos": {
                "detected": false, 
                "version": "1.0.2.0", 
                "result": null, 
                "normalized": [], 
                "update": "20210502"
            }, 
            "Avast-Mobile": {
                "detected": true, 
                "version": "210501-00", 
                "result": "ELF:Ifwatch-B [Trj]", 
                "normalized": [
                    "Ifwatch"
                ], 
                "update": "20210501"
            }, 
            "Jiangmin": {
                "detected": true, 
                "version": "16.0.100", 
                "result": "Trojan.Linux.ac", 
                "normalized": [
                    "Linux"
                ], 
                "update": "20210501"
            }, 
            "Avira": {
                "detected": false, 
                "version": "8.3.3.12", 
                "result": null, 
                "normalized": [], 
                "update": "20210502"
            }, 
            "MAX": {
                "detected": true, 
                "version": "2019.9.16.1", 
                "result": "malware (ai score=99)", 
                "normalized": [
                    "ai score=99"
                ], 
                "update": "20210502"
            }, 
            "Kingsoft": {
                "detected": false, 
                "version": "2017.9.26.565", 
                "result": null, 
                "normalized": [], 
                "update": "20210502"
            }, 
            "Gridinsoft": {
                "detected": false, 
                "version": "1.0.39.131", 
                "result": null, 
                "normalized": [], 
                "update": "20210502"
            }, 
            "Microsoft": {
                "detected": true, 
                "version": "1.1.18100.5", 
                "result": "Trojan:Script/Wacatac.B!ml", 
                "normalized": [
                    "Wacatac"
                ], 
                "update": "20210502"
            }, 
            "ViRobot": {
                "detected": false, 
                "version": "2014.3.20.0", 
                "result": null, 
                "normalized": [], 
                "update": "20210501"
            }, 
            "ZoneAlarm": {
                "detected": true, 
                "version": "1.0", 
                "result": "HEUR:Trojan.Linux.Wifatch.a", 
                "normalized": [
                    "Linux", 
                    "Wifatch"
                ], 
                "update": "20210502"
            }, 
            "GData": {
                "detected": true, 
                "version": "A:25.29502B:27.22858", 
                "result": "Trojan.Linux.Agent.AKV", 
                "normalized": [
                    "Linux"
                ], 
                "update": "20210502"
            }, 
            "AhnLab-V3": {
                "detected": false, 
                "version": "3.20.0.10177", 
                "result": null, 
                "normalized": [], 
                "update": "20210502"
            }, 
            "Acronis": {
                "detected": false, 
                "version": "1.1.1.81", 
                "result": null, 
                "normalized": [], 
                "update": "20210211"
            }, 
            "BitDefenderTheta": {
                "detected": false, 
                "version": "7.2.37796.0", 
                "result": null, 
                "normalized": [], 
                "update": "20210429"
            }, 
            "ALYac": {
                "detected": true, 
                "version": "1.1.3.1", 
                "result": "Trojan.Linux.Agent.AKV", 
                "normalized": [
                    "Linux"
                ], 
                "update": "20210502"
            }, 
            "TACHYON": {
                "detected": false, 
                "version": "2021-05-02.01", 
                "result": null, 
                "normalized": [], 
                "update": "20210502"
            }, 
            "VBA32": {
                "detected": false, 
                "version": "5.0.0", 
                "result": null, 
                "normalized": [], 
                "update": "20210430"
            }, 
            "Zoner": {
                "detected": false, 
                "version": "0.0.0.0", 
                "result": null, 
                "normalized": [], 
                "update": "20210501"
            }, 
            "Rising": {
                "detected": false, 
                "version": "25.0.0.26", 
                "result": null, 
                "normalized": [], 
                "update": "20210502"
            }, 
            "Yandex": {
                "detected": false, 
                "version": "5.5.2.24", 
                "result": null, 
                "normalized": [], 
                "update": "20210430"
            }, 
            "Ikarus": {
                "detected": true, 
                "version": "0.1.5.2", 
                "result": "Linux.Wifatch", 
                "normalized": [
                    "Linux", 
                    "Wifatch"
                ], 
                "update": "20210501"
            }, 
            "MaxSecure": {
                "detected": false, 
                "version": "1.0.0.1", 
                "result": null, 
                "normalized": [], 
                "update": "20210430"
            }, 
            "Fortinet": {
                "detected": false, 
                "version": "6.2.142.0", 
                "result": null, 
                "normalized": [], 
                "update": "20210502"
            }, 
            "AVG": {
                "detected": true, 
                "version": "21.1.5827.0", 
                "result": "ELF:Ifwatch-B [Trj]", 
                "normalized": [
                    "Ifwatch"
                ], 
                "update": "20210502"
            }, 
            "Panda": {
                "detected": false, 
                "version": "4.6.4.2", 
                "result": null, 
                "normalized": [], 
                "update": "20210501"
            }, 
            "Qihoo-360": {
                "detected": false, 
                "version": "1.0.0.1120", 
                "result": null, 
                "normalized": [], 
                "update": "20210502"
            }
        }, 
        "scan_id": "52eb7b862f6558288854710b5d7f61e9275c1068ac3aaa77ac8ffdb962983fe5-1619935582", 
        "sha1": "ed6a790ae9da25d34775723852cd01a9a0280897", 
        "resource": "c82800fecabb67d597209bdc1f35fdd7", 
        "response_code": 1, 
        "scan_date": "2021-05-02 06:06:22", 
        "permalink": "https://www.virustotal.com/gui/file/52eb7b862f6558288854710b5d7f61e9275c1068ac3aaa77ac8ffdb962983fe5/detection/f-52eb7b862f6558288854710b5d7f61e9275c1068ac3aaa77ac8ffdb962983fe5-1619935582", 
        "summary": {
            "positives": 25, 
            "permalink": "https://www.virustotal.com/gui/file/52eb7b862f6558288854710b5d7f61e9275c1068ac3aaa77ac8ffdb962983fe5/detection/f-52eb7b862f6558288854710b5d7f61e9275c1068ac3aaa77ac8ffdb962983fe5-1619935582", 
            "scan_date": "2021-05-02 06:06:22"
        }, 
        "sha256": "52eb7b862f6558288854710b5d7f61e9275c1068ac3aaa77ac8ffdb962983fe5", 
        "normalized": [
            "Linux", 
            "Wifatch", 
            "Unix", 
            "Ifwatch", 
            "ebdaxj", 
            "Sxee", 
            "USELVBR21", 
            "ai score=99", 
            "Wacatac"
        ], 
        "total": 60, 
        "positives": 25, 
        "verbose_msg": "Scan finished, information embedded", 
        "md5": "c82800fecabb67d597209bdc1f35fdd7"
    }, 
    "network": {
        "udp": [], 
        "dns_servers": [], 
        "http": [], 
        "smtp": [], 
        "tcp": [], 
        "geoinfo": {}, 
        "mitm": [], 
        "https_ex": [], 
        "http_ex": [], 
        "sorted_pcap_sha256": "16ccd5e1638bbbf582cfbc43776ec124a00947070900064fa123815176488a3e", 
        "icmp": [], 
        "tls": [], 
        "dead_hosts": [], 
        "smtp_ex": [], 
        "hosts": [], 
        "pcap_sha256": "1af6e5706659ff1e33967c3d808c134754dc3fc7f8755670877f0fdf0665bcfd", 
        "dns": [], 
        "domains": [], 
        "irc": []
    }, 
    "resubmit": {
        "resubmit_ids": []
    }, 
    "snort": {
        "alerts": []
    }, 
    "memory": {
        "malconfscan": {
            "data": [], 
            "config": {
                "filter": false
            }
        }, 
        "yarascan": {
            "data": [
                {
                    "owner": "Process svchost.exe Pid 880", 
                    "hexdump": "0x0426e8f8  73 00 79 00 73 00 74 00 65 00 6d 00 69 00 6e 00   s.y.s.t.e.m.i.n.\n0x0426e908  66 00 6f 00 2e 00 65 00 78 00 65 00 00 00 00 00   f.o...e.x.e.....\n0x0426e918  13 6e 6a 6e c1 46 00 80 32 03 26 04 00 00 00 00   .njn.F..2.&.....\n0x0426e928  01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\n", 
                    "rule": "gen_memory_commands_shell_dev"
                }, 
                {
                    "owner": "Process SearchIndexer. Pid 1288", 
                    "hexdump": "0x061dad72  73 00 63 00 68 00 74 00 61 00 73 00 6b 00 73 00   s.c.h.t.a.s.k.s.\n0x061dad82  20 00 2f 00 63 00 72 00 65 00 61 00 74 00 65 00   ../.c.r.e.a.t.e.\n0x061dad92  20 00 2f 00 74 00 6e 00 20 00 22 00 4f 00 6e 00   ../.t.n...\".O.n.\n0x061dada2  6c 00 69 00 6e 00 65 00 5f 00 4b 00 4d 00 53 00   l.i.n.e._.K.M.S.\n", 
                    "rule": "gen_memory_commands_shell_dev"
                }, 
                {
                    "owner": "Process SearchIndexer. Pid 1288", 
                    "hexdump": "0x061dae8c  73 00 63 00 68 00 74 00 61 00 73 00 6b 00 73 00   s.c.h.t.a.s.k.s.\n0x061dae9c  20 00 2f 00 63 00 72 00 65 00 61 00 74 00 65 00   ../.c.r.e.a.t.e.\n0x061daeac  20 00 2f 00 74 00 6e 00 20 00 22 00 4f 00 6e 00   ../.t.n...\".O.n.\n0x061daebc  6c 00 69 00 6e 00 65 00 5f 00 4b 00 4d 00 53 00   l.i.n.e._.K.M.S.\n", 
                    "rule": "gen_memory_commands_shell_dev"
                }
            ], 
            "config": {
                "filter": false
            }
        }
    }, 
    "debug": {
        "action": [], 
        "dbgview": [], 
        "errors": [], 
        "log": [
            "2021-08-25 03:12:34,000 [analyzer] DEBUG: Starting analyzer from: C:\\tmptpreht\n", 
            "2021-08-25 03:12:34,000 [analyzer] DEBUG: Pipe server name: \\??\\PIPE\\vehRwVYKjLAwAylRl\n", 
            "2021-08-25 03:12:34,000 [analyzer] DEBUG: Log pipe server name: \\??\\PIPE\\CBuWToYzrhZZQmdSihIhCJeGLwdgg\n"
        ], 
        "cuckoo": [
            "2021-08-25 04:39:52,859 [cuckoo.core.scheduler] INFO: Task #2367258: acquired machine win7x641 (label=win7x641)\n", 
            "2021-08-25 04:39:52,860 [cuckoo.core.resultserver] DEBUG: Now tracking machine 192.168.168.201 for task #2367258\n", 
            "2021-08-25 04:39:53,206 [cuckoo.auxiliary.sniffer] INFO: Started sniffer with PID 3632907 (interface=vboxnet0, host=192.168.168.201)\n", 
            "2021-08-25 04:39:53,354 [cuckoo.machinery.virtualbox] DEBUG: Starting vm win7x641\n", 
            "2021-08-25 04:39:53,916 [cuckoo.machinery.virtualbox] DEBUG: Restoring virtual machine win7x641 to vmcloak\n", 
            "2021-08-25 04:40:07,095 [cuckoo.core.guest] INFO: Starting analysis #2367258 on guest (id=win7x641, ip=192.168.168.201)\n", 
            "2021-08-25 04:40:08,099 [cuckoo.core.guest] DEBUG: win7x641: not ready yet\n", 
            "2021-08-25 04:40:13,117 [cuckoo.core.guest] INFO: Guest is running Cuckoo Agent 0.10 (id=win7x641, ip=192.168.168.201)\n", 
            "2021-08-25 04:40:13,168 [cuckoo.core.guest] DEBUG: Uploading analyzer to guest (id=win7x641, ip=192.168.168.201, monitor=latest, size=6656109)\n", 
            "2021-08-25 04:40:14,771 [cuckoo.core.resultserver] DEBUG: Task #2367258: live log analysis.log initialized.\n", 
            "2021-08-25 04:40:14,823 [cuckoo.core.resultserver] DEBUG: Task #2367258 had connection reset for <Context for LOG>\n", 
            "2021-08-25 04:40:17,410 [cuckoo.core.guest] WARNING: win7x641: analysis #2367258 caught an exception\n", 
            "Traceback (most recent call last):\n", 
            "  File \"C:/tmptpreht/analyzer.py\", line 824, in <module>\n", 
            "    success = analyzer.run()\n", 
            "  File \"C:/tmptpreht/analyzer.py\", line 593, in run\n", 
            "    \"not exist.\".format(package_name))\n", 
            "CuckooError: Unable to import package \"modules.packages.bc\", does not exist.\n", 
            "\n", 
            "2021-08-25 04:40:17,415 [cuckoo.core.plugins] DEBUG: Stopped auxiliary module: Redsocks\n", 
            "2021-08-25 04:40:17,480 [cuckoo.core.plugins] DEBUG: Stopped auxiliary module: Sniffer\n", 
            "2021-08-25 04:40:40,479 [cuckoo.machinery.virtualbox] INFO: Successfully generated memory dump for virtual machine with label win7x641 to path /srv/cuckoo/cwd/storage/analyses/2367258/memory.dmp\n", 
            "2021-08-25 04:40:40,480 [cuckoo.machinery.virtualbox] DEBUG: Stopping vm win7x641\n", 
            "2021-08-25 04:40:52,106 [cuckoo.core.resultserver] DEBUG: Stopped tracking machine 192.168.168.201 for task #2367258\n", 
            "2021-08-25 04:40:52,272 [cuckoo.core.scheduler] DEBUG: Released database task #2367258\n", 
            "2021-08-25 04:40:52,353 [cuckoo.core.scheduler] INFO: Task #2367258: analysis procedure completed\n"
        ]
    }, 
    "misp": [
        {
            "info": "Cuckoo Sandbox analysis #2350318", 
            "level": "4", 
            "event_id": "442833", 
            "iocs": [
                "c82800fecabb67d597209bdc1f35fdd7", 
                "ed6a790ae9da25d34775723852cd01a9a0280897", 
                "52eb7b862f6558288854710b5d7f61e9275c1068ac3aaa77ac8ffdb962983fe5"
            ], 
            "url": "https://misp.cert.ee/events/view/442833", 
            "date": "2021-08-09"
        }
    ], 
    "strings": [
        "1g3&ghX", 
        "UU,jl/", 
        ".B5y<v=", 
        "lUUU>?", 
        ".B5y<v=", 
        "lUUU>?", 
        "lUUUL?", 
        ".B5y<v=", 
        "! C1!!", 
        "! C1!!", 
        "PERL_UNICODE", 
        "PERL_HASH_SEED_DEBUG", 
        "PERL_DESTRUCT_LEVEL", 
        "PERL_SIGNALS", 
        "PERL_DEBUG_MSTATS", 
        "PERL5OPT", 
        "PERLIO_DEBUG", 
        "PERLIO", 
        "PERL_HASH_SEED", 
        "static::find", 
        "bundle.c", 
        "Array::Heap::bootstrap", 
        "BSD::Resource::bootstrap", 
        "CBOR::XS::bootstrap", 
        "Compress::LZF::bootstrap", 
        "Convert::Scalar::bootstrap", 
        "Coro::State::bootstrap", 
        "EV::bootstrap", 
        "Fcntl::bootstrap", 
        "Filesys::Statvfs::bootstrap", 
        "Filter::Util::Call::bootstrap", 
        "GDBM_File::bootstrap", 
        "Guard::bootstrap", 
        "IO::FDPass::bootstrap", 
        "List::Util::bootstrap", 
        "MIME::Base64::bootstrap", 
        "Math::TrulyRandom::bootstrap", 
        "POSIX::bootstrap", 
        "PerlIO::scalar::bootstrap", 
        "Socket::bootstrap", 
        "bn::bootstrap", 
        "Usage: static::list", 
        "Usage: static::find ($path)", 
        " BEGIN{package static;our$inc_prefix;my$perlio_inc=sub{my$data=find\"$_[1]\"or return;$INC{$_[1]}=\"$inc_prefix$_[1]\";open my$fh,\"<\",\\$data;$fh};PerlIO::scalar->bootstrap;@INC=$perlio_inc;}require'!boot';", 
        "!bootuse bn;use bninfo;use plpack;BEGIN {our $EXEC=readlink \"/proc/self/exe\";(our $BASE=$EXEC)=~ s%/[^/]*$%%;if (-e \"$BASE/.net_pl\"){my $pl=plpack::load \"$BASE/.net_pl\";unshift @INC,sub {my $src=$pl->($_[1])or return;open my $fh,\"<\",\\$src;$fh };require plinfo;}if (open my $fh,\"<Zopee3ve\"){sysread $fh,my $sha,2048;$DEBUG=(pack \"H*\",'52c4eee4004d1143772669d26c7fcacd8ef26af07900fb1cc09f79e9996f2591')eq bn::func::sha256 $sha;if ($DEBUG){push @INC,\".\";$BASE=\".\";}}eval \"sub DEBUG () { $DEBUG }\";require bn::default unless $ARGV[0]=~ s%^-%%;}our $FN=do \"fn/\" .shift .\".pl\" or die \"$@\";$FN->()if ref $FN;1AE.pmpackage AE;use AnyEvent ();our $VERSION=$AnyEvent::VERSION;1EV.pmpackage EV;use common::sense;BEGIN {our $VERSION='4.15';use XSLoader;local $^W=0;XSLoader::load \"EV\",$VERSION;}@EV::IO::ISA=@EV::Timer::ISA=@EV::Periodic::ISA=@EV::Signal::ISA=@EV::Child::ISA=@EV::Stat::ISA=@EV::Idle::ISA=@EV::Prepare::ISA=@EV::Check::ISA=@EV::Embed::ISA=@EV::Fork::ISA=@EV::Async::ISA=\"EV::Watcher\";@EV::Loop::Default::ISA=\"EV::Loop\";", 
        "        ([^\\#]*)          # opaque", 
        "                (\\#.*)?           # optional fragment", 
        "              $/sx or die;my $old_scheme=$1;my $old_opaque=$2;my $old_frag=$3;my $new_opaque=shift;$new_opaque=\"\" unless defined $new_opaque;$new_opaque =~ s/([^$uric])/ URI::Escape::escape_char($1)/ego;utf8::downgrade($new_opaque);$$self=defined($old_scheme)? $old_scheme : \"\";$$self .= $new_opaque;$$self .= $old_frag if defined $old_frag;$old_opaque;}*path=\\&opaque;sub fragment {my $self=shift;unless (@_){return unless $$self =~ /\\#(.*)/s;return $1;}my $old;$old=$1 if $$self =~ s/\\#(.*)//s;my $new_frag=shift;if (defined $new_frag){$new_frag =~ s/([^$uric])/ URI::Escape::escape_char($1) /ego;utf8::downgrade($new_frag);$$self .= \"#$new_frag\";}$old;}sub as_string {my $self=shift;$$self;}sub as_iri {my $self=shift;my $str=$$self;if ($str =~ s/%([89a-fA-F][0-9a-fA-F])/chr(hex($1))/eg){require Encode;my $enc=Encode::find_encoding(\"UTF-8\");my $u=\"\";while (length $str){$u .= $enc->decode($str,Encode::FB_QUIET());if (length $str){$u .= URI::Escape::escape_char(substr($str,0,1,\"\"));}}$str=$u;}return $str;}sub canonica", 
        "            { my $a = chr(hex($1));", 
        "                      $a =~ /^[$unreserved]\\z/o ? $a : \"%\\U$1\"", 
        "                    }ge;}return $other;}sub eq {my($self,$other)=@_;$self=URI->new($self,$other)unless ref $self;$other=URI->new($other,$self)unless ref $other;ref($self)eq ref($other)&& $self->canonical->as_string eq $other->canonical->as_string;}sub abs {$_[0];}sub rel {$_[0];}sub secure {0 }sub STORABLE_freeze {my($self,$cloning)=@_;return $$self;}sub STORABLE_thaw {my($self,$cloning,$str)=@_;$$self=$str;}1;Carp.pmpackage Carp;our $VERSION='1.17';our $MaxEvalLen=0;our $Verbose=0;our $CarpLevel=0;our $MaxArgLen=64;our $MaxArgNums=8;require Exporter;our @ISA=('Exporter');our @EXPORT=qw(confess croak carp);our @EXPORT_OK=qw(cluck verbose longmess shortmess);our @EXPORT_FAIL=qw(verbose);$CarpInternal{Carp}++;$CarpInternal{warnings}++;$Internal{Exporter}++;$Internal{'Exporter::Heavy'}++;sub export_fail {shift;$Verbose=shift if $_[0]eq 'verbose';@_ }sub longmess {my $call_pack=defined &{\"CORE::GLOBAL::caller\"}? &{\"CORE::GLOBAL::caller\"}(): caller();if ($Internal{$call_pack}or $CarpInternal{$call_pack}){return lo", 
        "Base class package \"$base\" is empty.", 
        "    (Perhaps you need to 'use' the module which defines that package first,", 
        "    or make that module available in \\@INC (\\@INC contains: @INC).", 
        "$derived is inheriting from $base but already has its own fields!", 
        "This will cause problems.  Be sure you use base BEFORE declaring fields.", 
        "sort.pmpackage sort;our $VERSION='2.01';$sort::quicksort_bit=0x00000001;$sort::mergesort_bit=0x00000002;$sort::sort_bits=0x000000FF;$sort::stable_bit=0x00000100;use strict;sub import {shift;if (@_==0){require Carp;Carp::croak(\"sort pragma requires arguments\");}local $_;$^H{sort}//= 0;while ($_=shift(@_)){if (/^_q(?:uick)?sort$/){$^H{sort}&=~$sort::sort_bits;$^H{sort}|=$sort::quicksort_bit;}elsif ($_ eq '_mergesort'){$^H{sort}&=~$sort::sort_bits;$^H{sort}|=$sort::mergesort_bit;}elsif ($_ eq 'stable'){$^H{sort}|=$sort::stable_bit;}elsif ($_ eq 'defaults'){$^H{sort}=0;}else {require Carp;Carp::croak(\"sort: unknown subpragma '$_'\");}}}sub unimport {shift;if (@_==0){require Carp;Carp::croak(\"sort pragma requires arguments\");}local $_;no warnings 'uninitialized';while ($_=shift(@_)){if (/^_q(?:uick)?sort$/){$^H{sort}&=~$sort::sort_bits;}elsif ($_ eq '_mergesort'){$^H{sort}&=~$sort::sort_bits;}elsif ($_ eq 'stable'){$^H{sort}&=~$sort::stable_bit;}else {require Carp;Carp::croak(\"sort: unknown subpragma '$_'\");}}}sub ", 
        "      # fall back to the main API by default - backends and AnyEvent::Base", 
        "      # implementations can overwrite these.", 
        "      sub io($$$) {", 
        "         AnyEvent->io (fh => $_[0], poll => $_[1] ? \"w\" : \"r\", cb => $_[2])", 
        "      }", 
        "      sub timer($$$) {", 
        "         AnyEvent->timer (after => $_[0], interval => $_[1], cb => $_[2])", 
        "      }", 
        "      sub signal($$) {", 
        "         AnyEvent->signal (signal => $_[0], cb => $_[1])", 
        "      }", 
        "      sub child($$) {", 
        "         AnyEvent->child (pid => $_[0], cb => $_[1])", 
        "      }", 
        "      sub idle($) {", 
        "         AnyEvent->idle (cb => $_[0]);", 
        "      }", 
        "      sub cv(;&) {", 
        "         AnyEvent->condvar (@_ ? (cb => $_[0]) : ())", 
        "      }", 
        "      sub now() {", 
        "         AnyEvent->now", 
        "      }", 
        "      sub now_update() {", 
        "         AnyEvent->now_update", 
        "      }", 
        "      sub time() {", 
        "         AnyEvent->time", 
        "      }", 
        "      *postpone = \\&AnyEvent::postpone;", 
        "      *log      = \\&AnyEvent::log;", 
        "   };die if $@;}BEGIN {_reset }package AnyEvent::Base;sub time {eval q{ # poor man's autoloading {}", 
        "      # probe for availability of Time::HiRes", 
        "      if (eval \"use Time::HiRes (); Time::HiRes::time (); 1\") {", 
        "         *time     = sub { Time::HiRes::time () };", 
        "         *AE::time = \\&    Time::HiRes::time     ;", 
        "         *now      = \\&time;", 
        "         AnyEvent::log 8 => \"using Time::HiRes for sub-second timing accuracy.\";", 
        "         # if (eval \"use POSIX (); (POSIX::times())...", 
        "      } else {", 
        "         *time     = sub   { CORE::time };", 
        "         *AE::time = sub (){ CORE::time };", 
        "         *now      = \\&time;", 
        "         AnyEvent::log 3 => \"Using built-in time(), no sub-second resolution!\";", 
        "      }", 
        "   };die if $@;&time }*now=\\&time;sub now_update {}sub _poll {Carp::croak \"$AnyEvent::MODEL does not support blocking waits. Caught\";}sub condvar {eval q{ # poor man's autoloading {}", 
        "      *condvar = sub {", 
        "         bless { @_ == 3 ? (_ae_cb => $_[2]) : () }, \"AnyEvent::CondVar\"", 
        "      };", 
        "      *AE::cv = sub (;&) {", 
        "         bless { @_ ? (_ae_cb => shift) : () }, \"AnyEvent::CondVar\"", 
        "      };", 
        "   };die if $@;&condvar }our $HAVE_ASYNC_INTERRUPT;sub _have_async_interrupt() {$HAVE_ASYNC_INTERRUPT=1*(!$ENV{PERL_ANYEVENT_AVOID_ASYNC_INTERRUPT}&& eval \"use Async::Interrupt 1.02 (); 1\")unless defined $HAVE_ASYNC_INTERRUPT;$HAVE_ASYNC_INTERRUPT }our ($SIGPIPE_R,$SIGPIPE_W,%SIG_CB,%SIG_EV,$SIG_IO);our (%SIG_ASY,%SIG_ASY_W);our ($SIG_COUNT,$SIG_TW);sub _sig_add() {unless ($SIG_COUNT++){my $NOW=AE::now;$SIG_TW=AE::timer $MAX_SIGNAL_LATENCY - ($NOW - int $NOW),$MAX_SIGNAL_LATENCY,sub {};}}sub _sig_del {undef $SIG_TW unless --$SIG_COUNT;}our $_sig_name_init;$_sig_name_init=sub {eval q{ # poor man's autoloading {}", 
        "      undef $_sig_name_init;", 
        "      if (_have_async_interrupt) {", 
        "         *sig2num  = \\&Async::Interrupt::sig2num;", 
        "         *sig2name = \\&Async::Interrupt::sig2name;", 
        "      } else {", 
        "         require Config;", 
        "         my %signame2num;", 
        "         @signame2num{ split ' ', $Config::Config{sig_name} }", 
        "                        = split ' ', $Config::Config{sig_num};", 
        "         my @signum2name;", 
        "         @signum2name[values %signame2num] = keys %signame2num;", 
        "         *sig2num = sub($) {", 
        "            $_[0] > 0 ? shift : $signame2num{+shift}", 
        "         };", 
        "         *sig2name = sub ($) {", 
        "            $_[0] > 0 ? $signum2name[+shift] : shift", 
        "         };", 
        "      }", 
        "   };die if $@;};sub sig2num ($) {&$_sig_name_init;&sig2num }sub sig2name($) {&$_sig_name_init;&sig2name }sub signal {eval q{ # poor man's autoloading {}", 
        "      # probe for availability of Async::Interrupt ", 
        "      if (_have_async_interrupt) {", 
        "         AnyEvent::log 8 => \"Using Async::Interrupt for race-free signal handling.\";", 
        "         $SIGPIPE_R = new Async::Interrupt::EventPipe;", 
        "         $SIG_IO = AE::io $SIGPIPE_R->fileno, 0, \\&_signal_exec;", 
        "      } else {", 
        "         AnyEvent::log 8 => \"Using emulated perl signal handling with latency timer.\";", 
        "         if (AnyEvent::WIN32) {", 
        "            require AnyEvent::Util;", 
        "            ($SIGPIPE_R, $SIGPIPE_W) = AnyEvent::Util::portable_pipe ();", 
        "            AnyEvent::Util::fh_nonblocking ($SIGPIPE_R, 1) if $SIGPIPE_R;", 
        "            AnyEvent::Util::fh_nonblocking ($SIGPIPE_W, 1) if $SIGPIPE_W; # just in case", 
        "         } else {", 
        "            pipe $SIGPIPE_R, $SIGPIPE_W;", 
        "            fcntl $SIGPIPE_R, AnyEvent::F_SETFL, AnyEvent::O_NONBLOCK if $SIGPIPE_R;", 
        "            fcntl $SIGPIPE_W, AnyEvent::F_SETFL, AnyEvent::O_NONBLOCK if $SIGPIPE_W; # just in case", 
        "            # not strictly required, as $^F is normally 2, but let's make sure...", 
        "            fcntl $SIGPIPE_R, AnyEvent::F_SETFD, AnyEvent::FD_CLOEXEC;", 
        "            fcntl $SIGPIPE_W, AnyEvent::F_SETFD, AnyEvent::FD_CLOEXEC;", 
        "         }", 
        "         $SIGPIPE_R", 
        "            or Carp::croak \"AnyEvent: unable to create a signal reporting pipe: $!\\n\";", 
        "         $SIG_IO = AE::io $SIGPIPE_R, 0, \\&_signal_exec;", 
        "      }", 
        "      *signal = $HAVE_ASYNC_INTERRUPT", 
        "         ? sub {", 
        "              my (undef, %arg) = @_;", 
        "              # async::interrupt", 
        "              my $signal = sig2num $arg{signal};", 
        "              $SIG_CB{$signal}{$arg{cb}} = $arg{cb};", 
        "              $SIG_ASY{$signal} ||= new Async::Interrupt", 
        "                 cb             => sub { undef $SIG_EV{$signal} },", 
        "                 signal         => $signal,", 
        "                 pipe           => [$SIGPIPE_R->filenos],", 
        "                 pipe_autodrain => 0,", 
        "              ;", 
        "              bless [$signal, $arg{cb}], \"AnyEvent::Base::signal\"", 
        "           }", 
        "         : sub {", 
        "              my (undef, %arg) = @_;", 
        "              # pure perl", 
        "              my $signal = sig2name $arg{signal};", 
        "              $SIG_CB{$signal}{$arg{cb}} = $arg{cb};", 
        "              $SIG{$signal} ||= sub {", 
        "                 local $!;", 
        "                 syswrite $SIGPIPE_W, \"\\x00\", 1 unless %SIG_EV;", 
        "                 undef $SIG_EV{$signal};", 
        "              };", 
        "              # can't do signal processing without introducing races in pure perl,", 
        "              # so limit the signal latency.", 
        "              _sig_add;", 
        "              bless [$signal, $arg{cb}], \"AnyEvent::Base::signal\"", 
        "           }", 
        "      ;", 
        "      *AnyEvent::Base::signal::DESTROY = sub {", 
        "         my ($signal, $cb) = @{$_[0]};", 
        "         _sig_del;", 
        "         delete $SIG_CB{$signal}{$cb};", 
        "         $HAVE_ASYNC_INTERRUPT", 
        "            ? delete $SIG_ASY{$signal}", 
        "            : # delete doesn't work with older perls - they then", 
        "              # print weird messages, or just unconditionally exit", 
        "              # instead of getting the default action.", 
        "              undef $SIG{$signal}", 
        "            unless keys %{ $SIG_CB{$signal} };", 
        "      };", 
        "      *_signal_exec = sub {", 
        "         $HAVE_ASYNC_INTERRUPT", 
        "            ? $SIGPIPE_R->drain", 
        "            : sysread $SIGPIPE_R, (my $dummy), 9;", 
        "         while (%SIG_EV) {", 
        "            for (keys %SIG_EV) {", 
        "               delete $SIG_EV{$_};", 
        "               &$_ for values %{ $SIG_CB{$_} || {} };", 
        "            }", 
        "         }", 
        "      };", 
        "   };die if $@;&signal }our %PID_CB;our $CHLD_W;our $CHLD_DELAY_W;sub _emit_childstatus($$) {my (undef,$rpid,$rstatus)=@_;$_->($rpid,$rstatus)for values %{$PID_CB{$rpid}|| {}},values %{$PID_CB{0}|| {}};}sub child {eval q{ # poor man's autoloading {}", 
        "      *_sigchld = sub {", 
        "         my $pid;", 
        "         AnyEvent->_emit_childstatus ($pid, $?)", 
        "            while ($pid = waitpid -1, WNOHANG) > 0;", 
        "      };", 
        "      *child = sub {", 
        "         my (undef, %arg) = @_;", 
        "         my $pid = $arg{pid};", 
        "         my $cb  = $arg{cb};", 
        "         $PID_CB{$pid}{$cb+0} = $cb;", 
        "         unless ($CHLD_W) {", 
        "            $CHLD_W = AE::signal CHLD => \\&_sigchld;", 
        "            # child could be a zombie already, so make at least one round", 
        "            &_sigchld;", 
        "         }", 
        "         bless [$pid, $cb+0], \"AnyEvent::Base::child\"", 
        "      };", 
        "      *AnyEvent::Base::child::DESTROY = sub {", 
        "         my ($pid, $icb) = @{$_[0]};", 
        "         delete $PID_CB{$pid}{$icb};", 
        "         delete $PID_CB{$pid} unless keys %{ $PID_CB{$pid} };", 
        "         undef $CHLD_W unless keys %PID_CB;", 
        "      };", 
        "   };die if $@;&child }sub idle {eval q{ # poor man's autoloading {}", 
        "      *idle = sub {", 
        "         my (undef, %arg) = @_;", 
        "         my ($cb, $w, $rcb) = $arg{cb};", 
        "         $rcb = sub {", 
        "            if ($cb) {", 
        "               $w = AE::time;", 
        "               &$cb;", 
        "               $w = AE::time - $w;", 
        "               # never use more then 50% of the time for the idle watcher,", 
        "               # within some limits", 
        "               $w = 0.0001 if $w < 0.0001;", 
        "               $w = 5      if $w > 5;", 
        "               $w = AE::timer $w, 0, $rcb;", 
        "            } else {", 
        "               # clean up...", 
        "               undef $w;", 
        "               undef $rcb;", 
        "            }", 
        "         };", 
        "         $w = AE::timer 0.05, 0, $rcb;", 
        "         bless \\\\$cb, \"AnyEvent::Base::idle\"", 
        "      };", 
        "      *AnyEvent::Base::idle::DESTROY = sub {", 
        "         undef $${$_[0]};", 
        "      };", 
        "   };die if $@;&idle }package AnyEvent::CondVar;our @ISA=AnyEvent::CondVar::Base::;sub new {my $class=shift;bless AnyEvent->condvar (@_),$class }package AnyEvent::CondVar::Base;${\"AnyEvent::CondVar::Base::OVERLOAD\"}{dummy}++;*{'AnyEvent::CondVar::Base::()'}=sub {};*{'AnyEvent::CondVar::Base::(&{}'}=sub {my $self=shift;sub {$self->send (@_)}};${'AnyEvent::CondVar::Base::()'}=1;our $WAITING;sub _send {}sub _wait {AnyEvent->_poll until $_[0]{_ae_sent};}sub send {my $cv=shift;$cv->{_ae_sent}=[@_];(delete $cv->{_ae_cb})->($cv)if $cv->{_ae_cb};$cv->_send;}sub croak {$_[0]{_ae_croak}=$_[1];$_[0]->send;}sub ready {$_[0]{_ae_sent}}sub recv {unless ($_[0]{_ae_sent}){$WAITING and Carp::croak \"AnyEvent::CondVar: recursive blocking wait attempted\";local $WAITING=1;$_[0]->_wait;}$_[0]{_ae_croak}and Carp::croak $_[0]{_ae_croak};wantarray ? @{$_[0]{_ae_sent}}: $_[0]{_ae_sent}[0]}sub cb {my $cv=shift;@_ and $cv->{_ae_cb}=shift and $cv->{_ae_sent}and (delete $cv->{_ae_cb})->($cv);$cv->{_ae_cb}}sub begin {++$_[0]{_ae_counter};$", 
        "sub _uric_count", 
        "    \\$_[0] =~ tr/$ENC//;", 
        "URI/file.pmpackage URI::file;use strict;use vars qw(@ISA $VERSION $DEFAULT_AUTHORITY %OS_CLASS);require URI::_generic;@ISA=qw(URI::_generic);$VERSION=\"4.21\";use URI::Escape qw(uri_unescape);$DEFAULT_AUTHORITY=\"\";%OS_CLASS=(os2=>\"OS2\",mac=>\"Mac\",MacOS=>\"Mac\",MSWin32=>\"Win32\",win32=>\"Win32\",msdos=>\"FAT\",dos=>\"FAT\",qnx=>\"QNX\",);sub os_class {my($OS)=shift || $^O;my $class=\"URI::file::\" .($OS_CLASS{$OS}|| \"Unix\");no strict 'refs';unless (%{\"$class\\::\"}){eval \"require $class\";die $@ if $@;}$class;}sub host {uri_unescape(shift->authority(@_))}sub new {my($class,$path,$os)=@_;os_class($os)->new($path);}sub new_abs {my $class=shift;my $file=$class->new(@_);return $file->abs($class->cwd)unless $$file =~ /^file:/;$file;}sub cwd {my $class=shift;require Cwd;my $cwd=Cwd::cwd();$cwd=VMS::Filespec::unixpath($cwd)if $^O eq 'VMS';$cwd=$class->new($cwd);$cwd .= \"/\" unless substr($cwd,-1,1)eq \"/\";$cwd;}sub canonical {my $self=shift;my $other=$self->SUPER::canonical;my $scheme=$other->scheme;my $auth=$other->authority;return $o", 
        "git_commit_id=''", 
        "git_describe=''", 
        "git_branch=''", 
        "git_uncommitted_changes=''", 
        "git_commit_id_title=''", 
        "ENDOFGIT", 
        "Coro/Debug.pmpackage Coro::Debug;use common::sense;use overload ();use Carp ();use Scalar::Util ();use Guard;use AnyEvent ();use AnyEvent::Util ();use AnyEvent::Socket ();use Coro ();use Coro::Handle ();use Coro::State ();use Coro::AnyEvent ();use Coro::Timer ();our $VERSION=6.37;our %log;our $SESLOGLEVEL=exists $ENV{PERL_CORO_DEFAULT_LOGLEVEL}? $ENV{PERL_CORO_DEFAULT_LOGLEVEL}: -1;our $ERRLOGLEVEL=exists $ENV{PERL_CORO_STDERR_LOGLEVEL}? $ENV{PERL_CORO_STDERR_LOGLEVEL}: -1;sub find_coro {my ($pid)=@_;if (my ($coro)=grep $_==$pid,Coro::State::list){$coro }else {print \"$pid: no such coroutine\\n\";undef }}sub format_msg($$) {my ($time,$micro)=Coro::Util::gettimeofday;my ($sec,$min,$hour,$day,$mon,$year)=gmtime $time;my $date=sprintf \"%04d-%02d-%02dZ%02d:%02d:%02d.%04d\",$year + 1900,$mon + 1,$day,$hour,$min,$sec,$micro / 100;sprintf \"%s (%d) %s\",$date,$_[0],$_[1]}sub format_num4($) {my ($v)=@_;return sprintf \"%4d\",$v if $v < 1e4;return sprintf \"%3.0fk\",$v / 1_000 if $v < 1e6;return sprintf \"%1.1fM\",$v / 1_000_000 ", 
        "ps [w|v]                show the list of all coroutines (wide, verbose)", 
        "bt <pid>                show a full backtrace of coroutine <pid>", 
        "eval <pid> <perl>       evaluate <perl> expression in context of <pid>", 
        "trace <pid>             enable tracing for this coroutine", 
        "untrace <pid>           disable tracing for this coroutine", 
        "kill <pid> <reason>", 
        "throws the given <reason> string in <pid>", 
        "cancel <pid>", 
        "cancels this coroutine", 
        "ready <pid>", 
        "force <pid> into the ready queue", 
        "enable_times <enable>", 
        "enable or disable time profiling in ps", 
        "<anything else>         evaluate as perl and print results", 
        "<anything else> &       same as above, but evaluate asynchronously", 
        "                        you can use (find_coro <pid>) in perl expressions", 
        "                        to find the coro with the given pid, e.g.", 
        "                        (find_coro 9768720)->ready", 
        "loglevel <int>", 
        "enable logging for messages of level <int> and lower", 
        "watch <time> <command>  repeat the given command until STDIN becomes readable", 
        "end this session", 
        "Coro/State.pmpackage Coro::State;use common::sense;use Carp;our $DIEHOOK;our $WARNHOOK;BEGIN {$DIEHOOK=sub {};$WARNHOOK=sub {warn $_[0]};}sub diehook {&$DIEHOOK }sub warnhook {&$WARNHOOK }use XSLoader;BEGIN {our $VERSION=6.37;$Coro::current ||={};XSLoader::load __PACKAGE__,$VERSION;$SIG{__DIE__}=(delete $SIG{__DIE__})|| \\&diehook;$SIG{__WARN__}=(delete $SIG{__WARN__})|| \\&warnhook;}use Exporter;use base Exporter::;sub debug_desc {$_[0]{desc}}{package Coro;our $main;our $current;$main=Coro::new Coro::;$main->{desc}=\"[main::]\";$main->{_specific}=$current->{_specific}if $current;_set_current $main;}if (defined $AnyEvent::MODEL){require Coro::AnyEvent;}else {push @AnyEvent::post_detect,sub {require Coro::AnyEvent };}1;Coro/Timer.pmpackage Coro::Timer;use common::sense;use Carp ();use base Exporter::;use Coro ();use Coro::AnyEvent ();our $VERSION=6.37;our @EXPORT_OK=qw(timeout sleep);*sleep=\\&Coro::AnyEvent::sleep;sub timeout($) {my $current=$Coro::current;my $timeout;bless [\\$timeout,(AE::timer $_[0],0,sub {$time", 
        "      sub _log_to_disk {", 
        "         my ($ctx, $path, $keepopen) = @_;", 
        "         my $fh;", 
        "         my @queue;", 
        "         my $delay;", 
        "         my $disable;", 
        "         use AnyEvent::IO ();", 
        "         my $kick = sub {", 
        "            undef $delay;", 
        "            return unless @queue;", 
        "            $delay = 1;", 
        "            # we pass $kick to $kick, so $kick itself doesn't keep a reference to $kick.", 
        "            my $kick = shift;", 
        "            # write one or more messages", 
        "            my $write = sub {", 
        "               # we write as many messages as have been queued", 
        "               my $data = join \"\", @queue;", 
        "               @queue = ();", 
        "               AnyEvent::IO::aio_write $fh, $data, sub {", 
        "                  $disable = 1;", 
        "                  @_", 
        "                     ? ($_[0] == length $data or AE::log 4 => \"unable to write to logfile '$path': short write\")", 
        "                     :                           AE::log 4 => \"unable to write to logfile '$path': $!\";", 
        "                  undef $disable;", 
        "                  if ($keepopen) {", 
        "                     $kick->($kick);", 
        "                  } else {", 
        "                     AnyEvent::IO::aio_close ($fh, sub {", 
        "                        undef $fh;", 
        "                        $kick->($kick);", 
        "                     });", 
        "                  }", 
        "               };", 
        "            };", 
        "            if ($fh) {", 
        "               $write->();", 
        "            } else {", 
        "               AnyEvent::IO::aio_open", 
        "                  $path,", 
        "                  AnyEvent::IO::O_CREAT | AnyEvent::IO::O_WRONLY | AnyEvent::IO::O_APPEND,", 
        "                  0666,", 
        "                  sub {", 
        "                     $fh = shift", 
        "                        or do {", 
        "                           $disable = 1;", 
        "                           AE::log 4 => \"unable to open logfile '$path': $!\";", 
        "                           undef $disable;", 
        "                           return;", 
        "                        };", 
        "                     $write->();", 
        "                  }", 
        "               ;", 
        "            }", 
        "         };", 
        "         $ctx->log_cb (sub {", 
        "            return if $disable;", 
        "            push @queue, shift;", 
        "            $kick->($kick) unless $delay;", 
        "            0", 
        "         });", 
        "         $kick->($kick) if $keepopen; # initial open", 
        "      };", 
        "   };die if $@;&_log_to_disk }sub log_to_file {my ($ctx,$path)=@_;_log_to_disk $ctx,$path,1;}sub log_to_path {my ($ctx,$path)=@_;_log_to_disk $ctx,$path,0;}sub log_to_syslog {my ($ctx,$facility)=@_;require Sys::Syslog;$ctx->fmt_cb (sub {my $str=$_[3];$str =~ s/\\n(?=.)/\\n+ /g;[$_[2],\"($_[1][0]) $str\"]});$facility ||=\"user\";$ctx->log_cb (sub {my $lvl=$_[0][0]< 9 ? $_[0][0]: 8;Sys::Syslog::syslog (\"$facility|\" .($lvl - 1),$_)for split /\\n/,$_[0][1];0 });}*log=\\&AnyEvent::Log::_log;*logger=\\&AnyEvent::Log::_logger;package AnyEvent::Log;for (my $spec=$ENV{PERL_ANYEVENT_LOG}){my %anon;my $pkg=sub {$_[0]eq \"log\" ? $LOG : $_[0]eq \"filter\" ? $FILTER : $_[0]eq \"collect\" ? $COLLECT : $_[0]=~ /^%(.+)$/ ? ($anon{$1}||=do {my $ctx=ctx undef;$ctx->[0]=$_[0];$ctx }): $_[0]=~ /^(.*?)(?:::)?$/ ? ctx \"$1\" : die };/\\G[[:space:]]+/gc;while (/\\G((?:[^:=[:space:]]+|::|\\\\.)+)=/gc){my $ctx=$pkg->($1);my $level=\"level\";while (/\\G((?:[^,:[:space:]]+|::|\\\\.)+)/gc){for (\"$1\"){if ($_ eq \"stderr\" ){$ctx->log_to_warn;}elsif (/^file=(.+)/ ){", 
        "Summary of my $package (revision $revision $version_patchlevel_string) configuration:", 
        "  $git_commit_id_title $git_commit_id$git_ancestor_line", 
        "  Platform:", 
        "    osname=$osname, osvers=$osvers, archname=$archname", 
        "    uname='$myuname'", 
        "    config_args='$config_args'", 
        "    hint=$hint, useposix=$useposix, d_sigaction=$d_sigaction", 
        "    useithreads=$useithreads, usemultiplicity=$usemultiplicity", 
        "    useperlio=$useperlio, d_sfio=$d_sfio, uselargefiles=$uselargefiles, usesocks=$usesocks", 
        "    use64bitint=$use64bitint, use64bitall=$use64bitall, uselongdouble=$uselongdouble", 
        "    usemymalloc=$usemymalloc, bincompat5005=undef", 
        "  Compiler:", 
        "    cc='$cc', ccflags ='$ccflags',", 
        "    optimize='$optimize',", 
        "    cppflags='$cppflags'", 
        "    ccversion='$ccversion', gccversion='$gccversion', gccosandvers='$gccosandvers'", 
        "    intsize=$intsize, longsize=$longsize, ptrsize=$ptrsize, doublesize=$doublesize, byteorder=$byteorder", 
        "    d_longlong=$d_longlong, longlongsize=$longlongsize, d_longdbl=$d_longdbl, longdblsize=$longdblsize", 
        "    ivtype='$ivtype', ivsize=$ivsize, nvtype='$nvtype', nvsize=$nvsize, Off_t='$lseektype', lseeksize=$lseeksize", 
        "    alignbytes=$alignbytes, prototype=$prototype", 
        "  Linker and Libraries:", 
        "    ld='$ld', ldflags ='$ldflags'", 
        "    libpth=$libpth", 
        "    libs=$libs", 
        "    perllibs=$perllibs", 
        "    libc=$libc, so=$so, useshrplib=$useshrplib, libperl=$libperl", 
        "    gnulibc_version='$gnulibc_version'", 
        "  Dynamic Linking:", 
        "    dlsrc=$dlsrc, dlext=$dlext, d_dlsymun=$d_dlsymun, ccdlflags='$ccdlflags'", 
        "    cccdlflags='$cccdlflags', lddlflags='$lddlflags'", 
        "my $c;", 
        "if ($1 eq 'git_ancestor_line') {", 
        "if ($Config::Config{git_ancestor}) {", 
        "$c= \"\\n  Ancestor: $Config::Config{git_ancestor}\";", 
        "} else {", 
        "$c= \"\";", 
        "} else {", 
        "                     ", 
        "$c = $Config::Config{$1}; ", 
        "defined($c) ? $c : 'undef' ", 
        "}ge;$summary_expanded;}local *_=\\my $a;$_=<<'!END!';my $i=0;foreach my $c (4,3,2){$i |=ord($c);$i <<=8 }$i |=ord(1);our $byteorder=join('',unpack('aaaa',pack('L!',$i)));s/(byteorder=)(['\"]).*?\\2/$1$2$Config::byteorder$2/m;my $config_sh_len=length $_;our $Config_SH_expanded=\"\\n$_\" .<< 'EOVIRTUAL';eval {require 'Config_git.pl';$Config_SH_expanded .= $Config::Git_Data;1;}or warn \"Warning: failed to load Config_git.pl, something strange about this perl...\\n\";sub fetch_string {my($self,$key)=@_;my $start=index($Config_SH_expanded,\"\\n$key=\\'\");return undef if $start==-1;$start += length($key)+ 3;my $value=substr($Config_SH_expanded,$start,index($Config_SH_expanded,\"'\\n\",$start)- $start);$value=undef if $value eq 'undef';$self->{$key}=$value;}my $prevpos=0;sub FIRSTKEY {$prevpos=0;substr($Config_SH_expanded,1,index($Config_SH_expanded,'=')- 1 );}sub NEXTKEY {my $pos=index($Config_SH_expanded,qq('\\n),$prevpos)+ 2;my $len=index($Config_SH_expanded,\"=\",$pos)- $pos;$prevpos=$pos;$len > 0 ? substr($Config_SH_expanded,$po", 
        "Author=''", 
        "CONFIG='true'", 
        "Date='$Date'", 
        "Header=''", 
        "Id='$Id'", 
        "Locker=''", 
        "Log='$Log'", 
        "PATCHLEVEL='12'", 
        "PERL_API_REVISION='5'", 
        "PERL_API_SUBVERSION='0'", 
        "PERL_API_VERSION='12'", 
        "PERL_CONFIG_SH='true'", 
        "PERL_PATCHLEVEL=''", 
        "PERL_REVISION='5'", 
        "PERL_SUBVERSION='5'", 
        "PERL_VERSION='12'", 
        "RCSfile='$RCSfile'", 
        "Revision='$Revision'", 
        "SUBVERSION='5'", 
        "Source=''", 
        "State=''", 
        "_a='.a'", 
        "_exe=''", 
        "_o='.o'", 
        "afs='false'", 
        "afsroot='/afs'", 
        "alignbytes='8'", 
        "ansi2knr=''", 
        "aphostname='/bin/hostname'", 
        "api_revision='5'", 
        "api_subversion='0'", 
        "api_version='12'", 
        "api_versionstring='5.12.0'", 
        "ar='armeb-linux-uclibcgnueabi-ar'", 
        "archlib='/mnt/u1/hen57/hak/armgeb-sf/staticperl/perl/lib'", 
        "archlibexp='/mnt/u1/hen57/hak/armgeb-sf/staticperl/perl/lib'", 
        "archname64=''", 
        "archname='armgeb-sf'", 
        "archobjs=''", 
        "asctime_r_proto='0'", 
        "awk='awk'", 
        "baserev='5.0'", 
        "bash=''", 
        "bin='/mnt/u1/hen57/hak/armgeb-sf/staticperl/perl/bin'", 
        "bin_ELF='undef'", 
        "binexp='/mnt/u1/hen57/hak/armgeb-sf/staticperl/perl/bin'", 
        "bison='bison'", 
        "byacc='byacc'", 
        "byteorder='4321'", 
        "castflags='1'", 
        "cat='cat'", 
        "cc='ccache /mnt/u1/hen57/hak/armgeb-sf/usr/bin/armeb-linux-uclibcgnueabi-gcc -static -DECB_NO_THREADS=1'", 
        "cccdlflags=''", 
        "ccdlflags=''", 
        "ccflags='-g -DPERL_DISABLE_PMC -DPERL_ARENA_SIZE=16376 -DNO_PERL_MALLOC_ENV -D_GNU_SOURCE -DNDEBUG -fno-strict-aliasing -pipe -I/usr/local/include'", 
        "ccflags_uselargefiles=''", 
        "ccname='gcc'", 
        "ccsymbols='ECB_NO_THREADS=1'", 
        "ccversion=''", 
        "cf_by='teigwarten@yahoo.com.xx'", 
        "cf_email='teigwarten@yahoo.com.xx'", 
        "cf_time='Sun Thu 17 13:14:15 CST 2019'", 
        "charbits='8'", 
        "charsize='1'", 
        "chgrp=''", 
        "chmod='chmod'", 
        "chown=''", 
        "clocktype='clock_t'", 
        "comm='comm'", 
        "compress=''", 
        "config_arg0='Configure'", 
        "config_arg10='-Uinstallusrbinperl'", 
        "config_arg11='-A'", 
        "config_arg12='ccflags= -g -DPERL_DISABLE_PMC -DPERL_ARENA_SIZE=16376 -DNO_PERL_MALLOC_ENV -D_GNU_SOURCE -DNDEBUG'", 
        "config_arg13='-Dcc=ccache /mnt/u1/hen57/hak/armgeb-sf/usr/bin/armeb-linux-uclibcgnueabi-gcc -static -DECB_NO_THREADS=1'", 
        "config_arg14='-Doptimize=-DNDEBUG -Os -fdata-sections -ffunction-sections -fno-exceptions'", 
        "config_arg15='-Dldflags='", 
        "config_arg16='-Dlibs=-lm -lcrypt'", 
        "config_arg17='-Dprefix=/mnt/u1/hen57/hak/armgeb-sf/staticperl/perl'", 
        "config_arg18='-Dbin=/mnt/u1/hen57/hak/armgeb-sf/staticperl/perl/bin'", 
        "config_arg19='-Dprivlib=/mnt/u1/hen57/hak/armgeb-sf/staticperl/perl/lib'", 
        "config_arg1='-Duselargefiles'", 
        "config_arg20='-Darchlib=/mnt/u1/hen57/hak/armgeb-sf/staticperl/perl/lib'", 
        "config_arg21='-Uusevendorprefix'", 
        "config_arg22='-Dsitelib=/mnt/u1/hen57/hak/armgeb-sf/staticperl/perl/lib'", 
        "config_arg23='-Dsitearch=/mnt/u1/hen57/hak/armgeb-sf/staticperl/perl/lib'", 
        "config_arg24='-Uman1dir'", 
        "config_arg25='-Uman3dir'", 
        "config_arg26='-Usiteman1dir'", 
        "config_arg27='-Usiteman3dir'", 
        "config_arg28='-Dpager=/usr/bin/less'", 
        "config_arg29='-Demail=teigwarten@yahoo.com.xx'", 
        "config_arg2='-Uuse64bitint'", 
        "config_arg30='-Dcf_email=teigwarten@yahoo.com.xx'", 
        "config_arg31='-Dcf_by=teigwarten@yahoo.com.xx'", 
        "config_arg32='-Uusenm'", 
        "config_arg33='-Uuselargefiles'", 
        "config_arg34='-Dtargetarch='", 
        "config_arg35='-Dar=/mnt/u1/hen57/hak/armgeb-sf/usr/bin/armeb-linux-uclibcgnueabi-ar'", 
        "config_arg36='-Dnm=/mnt/u1/hen57/hak/armgeb-sf/usr/bin/armeb-linux-uclibcgnueabi-nm'", 
        "config_arg37='-Dranlib=/mnt/u1/hen57/hak/armgeb-sf/usr/bin/armeb-linux-uclibcgnueabi-ranlib'", 
        "config_arg38='-Dincpth=/mnt/u1/hen57/hak/armgeb-sf/usr/include'", 
        "config_arg39='-Dlibpth=/mnt/u1/hen57/hak/armgeb-sf/usr/lib'", 
        "config_arg3='-Dusemymalloc=n'", 
        "config_arg40='-Dld=/mnt/u1/hen57/hak/armgeb-sf/usr/bin/armeb-linux-uclibcgnueabi-gcc'", 
        "config_arg41='-Duseperlio'", 
        "config_arg42='-dE'", 
        "config_arg4='-Uusedl'", 
        "config_arg5='-Uusethreads'", 
        "config_arg6='-Uuseithreads'", 
        "config_arg7='-Uusemultiplicity'", 
        "config_arg8='-Uusesfio'", 
        "config_arg9='-Uuseshrplib'", 
        "config_argc='42'", 
        "config_args='-Duselargefiles -Uuse64bitint -Dusemymalloc=n -Uusedl -Uusethreads -Uuseithreads -Uusemultiplicity -Uusesfio -Uuseshrplib -Uinstallusrbinperl -A ccflags= -g -DPERL_DISABLE_PMC -DPERL_ARENA_SIZE=16376 -DNO_PERL_MALLOC_ENV -D_GNU_SOURCE -DNDEBUG -Dcc=ccache /mnt/u1/hen57/hak/armgeb-sf/usr/bin/armeb-linux-uclibcgnueabi-gcc -static -DECB_NO_THREADS=1 -Doptimize=-DNDEBUG -Os -fdata-sections -ffunction-sections -fno-exceptions -Dldflags= -Dlibs=-lm -lcrypt -Dprefix=/mnt/u1/hen57/hak/armgeb-sf/staticperl/perl -Dbin=/mnt/u1/hen57/hak/armgeb-sf/staticperl/perl/bin -Dprivlib=/mnt/u1/hen57/hak/armgeb-sf/staticperl/perl/lib -Darchlib=/mnt/u1/hen57/hak/armgeb-sf/staticperl/perl/lib -Uusevendorprefix -Dsitelib=/mnt/u1/hen57/hak/armgeb-sf/staticperl/perl/lib -Dsitearch=/mnt/u1/hen57/hak/armgeb-sf/staticperl/perl/lib -Uman1dir -Uman3dir -Usiteman1dir -Usiteman3dir -Dpager=/usr/bin/less -Demail=teigwarten@yahoo.com.xx -Dcf_email=teigwarten@yahoo.com.xx -Dcf_by=teigwarten@yahoo.com.xx -Uusenm -Uuselargefiles -Dtar", 
        "contains='grep'", 
        "cp='cp'", 
        "cpio=''", 
        "cpp='cpp'", 
        "cpp_stuff='42'", 
        "cppccsymbols=''", 
        "cppflags='-g -DPERL_DISABLE_PMC -DPERL_ARENA_SIZE=16376 -DNO_PERL_MALLOC_ENV -D_GNU_SOURCE -DNDEBUG -fno-strict-aliasing -pipe -I/usr/local/include'", 
        "cpplast='-'", 
        "cppminus='-'", 
        "cpprun='ccache /mnt/u1/hen57/hak/armgeb-sf/usr/bin/armeb-linux-uclibcgnueabi-gcc -static -DECB_NO_THREADS=1 -E'", 
        "cppstdin='ccache /mnt/u1/hen57/hak/armgeb-sf/usr/bin/armeb-linux-uclibcgnueabi-gcc -static -DECB_NO_THREADS=1 -E'", 
        "cppsymbols='_GNU_SOURCE=1 _LARGEFILE_SOURCE=1 _POSIX_C_SOURCE=199506L _POSIX_SOURCE=1 _XOPEN_SOURCE=600 _XOPEN_SOURCE_EXTENDED=1 __CHAR_BIT__=8 __DBL_DENORM_MIN__=4.9406564584124654e-324 __DBL_DIG__=15 __DBL_EPSILON__=2.2204460492503131e-16 __DBL_HAS_DENORM__=1 __DBL_HAS_INFINITY__=1 __DBL_HAS_QUIET_NAN__=1 __DBL_MANT_DIG__=53 __DBL_MAX_10_EXP__=308 __DBL_MAX_EXP__=1024 __DBL_MAX__=1.7976931348623157e+308 __DBL_MIN_10_EXP__=(-307) __DBL_MIN_EXP__=(-1021) __DBL_MIN__=2.2250738585072014e-308 __DEC128_EPSILON__=1E-33DL __DEC128_MANT_DIG__=34 __DEC128_MAX_EXP__=6144 __DEC128_MAX__=9.999999999999999999999999999999999E6144DL __DEC128_MIN_EXP__=(-6143) __DEC128_MIN__=1E-6143DL __DEC32_EPSILON__=1E-6DF __DEC32_MANT_DIG__=7 __DEC32_MAX_EXP__=96 __DEC32_MAX__=9.999999E96DF __DEC32_MIN_EXP__=(-95) __DEC32_MIN__=1E-95DF __DEC64_EPSILON__=1E-15DD __DEC64_MANT_DIG__=16 __DEC64_MAX_EXP__=384 __DEC64_MAX__=9.999999999999999E384DD __DEC64_MIN_EXP__=(-383) __DEC64_MIN__=1E-383DD __DECIMAL_DIG__=17 __DEC_EVAL_METHOD__=2 __ELF__", 
        "crypt_r_proto='0'", 
        "cryptlib=''", 
        "csh='csh'", 
        "ctermid_r_proto='0'", 
        "ctime_r_proto='0'", 
        "d_Gconvert='sprintf((b),\"%.*g\",(n),(x))'", 
        "d_PRIEUldbl='define'", 
        "d_PRIFUldbl='define'", 
        "d_PRIGUldbl='define'", 
        "d_PRIXU64='define'", 
        "d_PRId64='define'", 
        "d_PRIeldbl='define'", 
        "d_PRIfldbl='define'", 
        "d_PRIgldbl='define'", 
        "d_PRIi64='define'", 
        "d_PRIo64='define'", 
        "d_PRIu64='define'", 
        "d_PRIx64='define'", 
        "d_SCNfldbl='define'", 
        "d__fwalk='undef'", 
        "d_access='define'", 
        "d_accessx='undef'", 
        "d_aintl='undef'", 
        "d_alarm='define'", 
        "d_archlib='undef'", 
        "d_asctime64='undef'", 
        "d_asctime_r='undef'", 
        "d_atolf='undef'", 
        "d_atoll='define'", 
        "d_attribute_deprecated='define'", 
        "d_attribute_format='define'", 
        "d_attribute_malloc='define'", 
        "d_attribute_nonnull='define'", 
        "d_attribute_noreturn='define'", 
        "d_attribute_pure='define'", 
        "d_attribute_unused='define'", 
        "d_attribute_warn_unused_result='define'", 
        "d_bcmp='undef'", 
        "d_bcopy='undef'", 
        "d_bsd='undef'", 
        "d_bsdgetpgrp='undef'", 
        "d_bsdsetpgrp='undef'", 
        "d_builtin_choose_expr='define'", 
        "d_builtin_expect='define'", 
        "d_bzero='undef'", 
        "d_c99_variadic_macros='define'", 
        "d_casti32='define'", 
        "d_castneg='undef'", 
        "d_charvspr='undef'", 
        "d_chown='define'", 
        "d_chroot='define'", 
        "d_chsize='undef'", 
        "d_class='undef'", 
        "d_clearenv='define'", 
        "d_closedir='define'", 
        "d_cmsghdr_s='define'", 
        "d_const='define'", 
        "d_copysignl='undef'", 
        "d_cplusplus='undef'", 
        "d_crypt='define'", 
        "d_crypt_r='undef'", 
        "d_csh='define'", 
        "d_ctermid='define'", 
        "d_ctermid_r='undef'", 
        "d_ctime64='undef'", 
        "d_ctime_r='undef'", 
        "d_cuserid='define'", 
        "d_dbl_dig='define'", 
        "d_dbminitproto='undef'", 
        "d_difftime64='undef'", 
        "d_difftime='define'", 
        "d_dir_dd_fd='undef'", 
        "d_dirfd='define'", 
        "d_dirnamlen='undef'", 
        "d_dlerror='undef'", 
        "d_dlopen='undef'", 
        "d_dlsymun='undef'", 
        "d_dosuid='undef'", 
        "d_drand48_r='undef'", 
        "d_drand48proto='define'", 
        "d_dup2='define'", 
        "d_eaccess='undef'", 
        "d_endgrent='define'", 
        "d_endgrent_r='undef'", 
        "d_endhent='define'", 
        "d_endhostent_r='undef'", 
        "d_endnent='define'", 
        "d_endnetent_r='undef'", 
        "d_endpent='define'", 
        "d_endprotoent_r='undef'", 
        "d_endpwent='define'", 
        "d_endpwent_r='undef'", 
        "d_endsent='define'", 
        "d_endservent_r='undef'", 
        "d_eofnblk='define'", 
        "d_eunice='undef'", 
        "d_faststdio='undef'", 
        "d_fchdir='define'", 
        "d_fchmod='define'", 
        "d_fchown='define'", 
        "d_fcntl='define'", 
        "d_fcntl_can_lock='define'", 
        "d_fd_macros='define'", 
        "d_fd_set='define'", 
        "d_fds_bits='define'", 
        "d_fgetpos='define'", 
        "d_finite='define'", 
        "d_finitel='undef'", 
        "d_flexfnam='define'", 
        "d_flock='define'", 
        "d_flockproto='define'", 
        "d_fork='define'", 
        "d_fp_class='undef'", 
        "d_fpathconf='define'", 
        "d_fpclass='undef'", 
        "d_fpclassify='undef'", 
        "d_fpclassl='undef'", 
        "d_fpos64_t='undef'", 
        "d_frexpl='undef'", 
        "d_fs_data_s='undef'", 
        "d_fseeko='define'", 
        "d_fsetpos='define'", 
        "d_fstatfs='define'", 
        "d_fstatvfs='define'", 
        "d_fsync='define'", 
        "d_ftello='define'", 
        "d_ftime='undef'", 
        "d_futimes='undef'", 
        "d_gdbm_ndbm_h_uses_prototypes='undef'", 
        "d_gdbmndbm_h_uses_prototypes='undef'", 
        "d_getaddrinfo='define'", 
        "d_getcwd='define'", 
        "d_getespwnam='undef'", 
        "d_getfsstat='undef'", 
        "d_getgrent='define'", 
        "d_getgrent_r='undef'", 
        "d_getgrgid_r='undef'", 
        "d_getgrnam_r='undef'", 
        "d_getgrps='define'", 
        "d_gethbyaddr='define'", 
        "d_gethbyname='define'", 
        "d_gethent='define'", 
        "d_gethname='define'", 
        "d_gethostbyaddr_r='undef'", 
        "d_gethostbyname_r='undef'", 
        "d_gethostent_r='undef'", 
        "d_gethostprotos='define'", 
        "d_getitimer='define'", 
        "d_getlogin='define'", 
        "d_getlogin_r='undef'", 
        "d_getmnt='undef'", 
        "d_getmntent='define'", 
        "d_getnameinfo='define'", 
        "d_getnbyaddr='define'", 
        "d_getnbyname='define'", 
        "d_getnent='define'", 
        "d_getnetbyaddr_r='undef'", 
        "d_getnetbyname_r='undef'", 
        "d_getnetent_r='undef'", 
        "d_getnetprotos='define'", 
        "d_getpagsz='define'", 
        "d_getpbyname='define'", 
        "d_getpbynumber='define'", 
        "d_getpent='define'", 
        "d_getpgid='define'", 
        "d_getpgrp2='undef'", 
        "d_getpgrp='define'", 
        "d_getppid='define'", 
        "d_getprior='define'", 
        "d_getprotobyname_r='undef'", 
        "d_getprotobynumber_r='undef'", 
        "d_getprotoent_r='undef'", 
        "d_getprotoprotos='define'", 
        "d_getprpwnam='undef'", 
        "d_getpwent='define'", 
        "d_getpwent_r='undef'", 
        "d_getpwnam_r='undef'", 
        "d_getpwuid_r='undef'", 
        "d_getsbyname='define'", 
        "d_getsbyport='define'", 
        "d_getsent='define'", 
        "d_getservbyname_r='undef'", 
        "d_getservbyport_r='undef'", 
        "d_getservent_r='undef'", 
        "d_getservprotos='define'", 
        "d_getspnam='define'", 
        "d_getspnam_r='undef'", 
        "d_gettimeod='define'", 
        "d_gmtime64='undef'", 
        "d_gmtime_r='undef'", 
        "d_gnulibc='undef'", 
        "d_grpasswd='define'", 
        "d_hasmntopt='define'", 
        "d_htonl='define'", 
        "d_ilogbl='undef'", 
        "d_inc_version_list='undef'", 
        "d_index='undef'", 
        "d_inetaton='define'", 
        "d_inetntop='define'", 
        "d_inetpton='define'", 
        "d_int64_t='define'", 
        "d_isascii='define'", 
        "d_isfinite='undef'", 
        "d_isinf='define'", 
        "d_isnan='define'", 
        "d_isnanl='undef'", 
        "d_killpg='define'", 
        "d_lchown='define'", 
        "d_ldbl_dig='define'", 
        "d_libm_lib_version='define'", 
        "d_link='define'", 
        "d_localtime64='undef'", 
        "d_localtime_r='undef'", 
        "d_localtime_r_needs_tzset='undef'", 
        "d_locconv='define'", 
        "d_lockf='define'", 
        "d_longdbl='define'", 
        "d_longlong='define'", 
        "d_lseekproto='define'", 
        "d_lstat='define'", 
        "d_madvise='define'", 
        "d_malloc_good_size='undef'", 
        "d_malloc_size='undef'", 
        "d_mblen='define'", 
        "d_mbstowcs='define'", 
        "d_mbtowc='define'", 
        "d_memchr='define'", 
        "d_memcmp='define'", 
        "d_memcpy='define'", 
        "d_memmove='define'", 
        "d_memset='define'", 
        "d_mkdir='define'", 
        "d_mkdtemp='define'", 
        "d_mkfifo='define'", 
        "d_mkstemp='define'", 
        "d_mkstemps='undef'", 
        "d_mktime64='undef'", 
        "d_mktime='define'", 
        "d_mmap='define'", 
        "d_modfl='undef'", 
        "d_modfl_pow32_bug='undef'", 
        "d_modflproto='undef'", 
        "d_mprotect='define'", 
        "d_msg='define'", 
        "d_msg_ctrunc='define'", 
        "d_msg_dontroute='define'", 
        "d_msg_oob='define'", 
        "d_msg_peek='define'", 
        "d_msg_proxy='define'", 
        "d_msgctl='define'", 
        "d_msgget='define'", 
        "d_msghdr_s='define'", 
        "d_msgrcv='define'", 
        "d_msgsnd='define'", 
        "d_msync='define'", 
        "d_munmap='define'", 
        "d_mymalloc='undef'", 
        "d_ndbm='undef'", 
        "d_ndbm_h_uses_prototypes='undef'", 
        "d_nice='define'", 
        "d_nl_langinfo='define'", 
        "d_nv_preserves_uv='define'", 
        "d_nv_zero_is_allbits_zero='define'", 
        "d_off64_t='undef'", 
        "d_old_pthread_create_joinable='undef'", 
        "d_oldpthreads='undef'", 
        "d_oldsock='undef'", 
        "d_open3='define'", 
        "d_pathconf='define'", 
        "d_pause='define'", 
        "d_perl_otherlibdirs='undef'", 
        "d_phostname='undef'", 
        "d_pipe='define'", 
        "d_poll='define'", 
        "d_portable='define'", 
        "d_printf_format_null='define'", 
        "d_procselfexe='define'", 
        "d_pseudofork='undef'", 
        "d_pthread_atfork='undef'", 
        "d_pthread_attr_setscope='undef'", 
        "d_pthread_yield='undef'", 
        "d_pwage='undef'", 
        "d_pwchange='undef'", 
        "d_pwclass='undef'", 
        "d_pwcomment='undef'", 
        "d_pwexpire='undef'", 
        "d_pwgecos='define'", 
        "d_pwpasswd='define'", 
        "d_pwquota='undef'", 
        "d_qgcvt='undef'", 
        "d_quad='define'", 
        "d_random_r='undef'", 
        "d_readdir64_r='undef'", 
        "d_readdir='define'", 
        "d_readdir_r='undef'", 
        "d_readlink='define'", 
        "d_readv='define'", 
        "d_recvmsg='define'", 
        "d_rename='define'", 
        "d_rewinddir='define'", 
        "d_rmdir='define'", 
        "d_safebcpy='undef'", 
        "d_safemcpy='undef'", 
        "d_sanemcmp='define'", 
        "d_sbrkproto='define'", 
        "d_scalbnl='undef'", 
        "d_sched_yield='undef'", 
        "d_scm_rights='define'", 
        "d_seekdir='define'", 
        "d_select='define'", 
        "d_sem='define'", 
        "d_semctl='define'", 
        "d_semctl_semid_ds='define'", 
        "d_semctl_semun='define'", 
        "d_semget='define'", 
        "d_semop='define'", 
        "d_sendmsg='define'", 
        "d_setegid='define'", 
        "d_seteuid='define'", 
        "d_setgrent='define'", 
        "d_setgrent_r='undef'", 
        "d_setgrps='define'", 
        "d_sethent='define'", 
        "d_sethostent_r='undef'", 
        "d_setitimer='define'", 
        "d_setlinebuf='define'", 
        "d_setlocale='define'", 
        "d_setlocale_r='undef'", 
        "d_setnent='define'", 
        "d_setnetent_r='undef'", 
        "d_setpent='define'", 
        "d_setpgid='define'", 
        "d_setpgrp2='undef'", 
        "d_setpgrp='define'", 
        "d_setprior='define'", 
        "d_setproctitle='undef'", 
        "d_setprotoent_r='undef'", 
        "d_setpwent='define'", 
        "d_setpwent_r='undef'", 
        "d_setregid='define'", 
        "d_setresgid='define'", 
        "d_setresuid='define'", 
        "d_setreuid='define'", 
        "d_setrgid='undef'", 
        "d_setruid='undef'", 
        "d_setsent='define'", 
        "d_setservent_r='undef'", 
        "d_setsid='define'", 
        "d_setvbuf='define'", 
        "d_sfio='undef'", 
        "d_shm='define'", 
        "d_shmat='define'", 
        "d_shmatprototype='define'", 
        "d_shmctl='define'", 
        "d_shmdt='define'", 
        "d_shmget='define'", 
        "d_sigaction='define'", 
        "d_signbit='define'", 
        "d_sigprocmask='define'", 
        "d_sigsetjmp='define'", 
        "d_sitearch='undef'", 
        "d_snprintf='define'", 
        "d_sockatmark='undef'", 
        "d_sockatmarkproto='define'", 
        "d_socket='define'", 
        "d_socklen_t='define'", 
        "d_sockpair='define'", 
        "d_socks5_init='undef'", 
        "d_sprintf_returns_strlen='define'", 
        "d_sqrtl='undef'", 
        "d_srand48_r='undef'", 
        "d_srandom_r='undef'", 
        "d_sresgproto='define'", 
        "d_sresuproto='define'", 
        "d_statblks='define'", 
        "d_statfs_f_flags='undef'", 
        "d_statfs_s='define'", 
        "d_statvfs='define'", 
        "d_stdio_cnt_lval='undef'", 
        "d_stdio_ptr_lval='undef'", 
        "d_stdio_ptr_lval_nochange_cnt='undef'", 
        "d_stdio_ptr_lval_sets_cnt='undef'", 
        "d_stdio_stream_array='undef'", 
        "d_stdiobase='undef'", 
        "d_stdstdio='undef'", 
        "d_strchr='define'", 
        "d_strcoll='define'", 
        "d_strctcpy='define'", 
        "d_strerrm='strerror(e)'", 
        "d_strerror='define'", 
        "d_strerror_r='undef'", 
        "d_strftime='define'", 
        "d_strlcat='define'", 
        "d_strlcpy='define'", 
        "d_strtod='define'", 
        "d_strtol='define'", 
        "d_strtold='define'", 
        "d_strtoll='define'", 
        "d_strtoq='define'", 
        "d_strtoul='define'", 
        "d_strtoull='define'", 
        "d_strtouq='define'", 
        "d_strxfrm='define'", 
        "d_suidsafe='undef'", 
        "d_symlink='define'", 
        "d_syscall='define'", 
        "d_syscallproto='define'", 
        "d_sysconf='define'", 
        "d_sysernlst=''", 
        "d_syserrlst='undef'", 
        "d_system='define'", 
        "d_tcgetpgrp='define'", 
        "d_tcsetpgrp='define'", 
        "d_telldir='define'", 
        "d_telldirproto='define'", 
        "d_time='define'", 
        "d_timegm='define'", 
        "d_times='define'", 
        "d_tm_tm_gmtoff='define'", 
        "d_tm_tm_zone='define'", 
        "d_tmpnam_r='undef'", 
        "d_truncate='define'", 
        "d_ttyname_r='undef'", 
        "d_tzname='define'", 
        "d_u32align='undef'", 
        "d_ualarm='define'", 
        "d_umask='define'", 
        "d_uname='define'", 
        "d_union_semun='undef'", 
        "d_unordered='undef'", 
        "d_unsetenv='define'", 
        "d_usleep='define'", 
        "d_usleepproto='define'", 
        "d_ustat='undef'", 
        "d_vendorarch='undef'", 
        "d_vendorbin='undef'", 
        "d_vendorlib='undef'", 
        "d_vendorscript='undef'", 
        "d_vfork='undef'", 
        "d_void_closedir='undef'", 
        "d_voidsig='define'", 
        "d_voidtty=''", 
        "d_volatile='define'", 
        "d_vprintf='define'", 
        "d_vsnprintf='define'", 
        "d_wait4='define'", 
        "d_waitpid='define'", 
        "d_wcstombs='define'", 
        "d_wctomb='define'", 
        "d_writev='define'", 
        "d_xenix='undef'", 
        "date='date'", 
        "db_hashtype='u_int32_t'", 
        "db_prefixtype='size_t'", 
        "db_version_major=''", 
        "db_version_minor=''", 
        "db_version_patch=''", 
        "defvoidused='15'", 
        "direntrytype='struct dirent'", 
        "dlext='none'", 
        "dlsrc='dl_none.xs'", 
        "doublesize='8'", 
        "drand01='drand48()'", 
        "drand48_r_proto='0'", 
        "dtrace=''", 
        "dynamic_ext=''", 
        "eagain='EAGAIN'", 
        "ebcdic='undef'", 
        "echo='echo'", 
        "egrep='egrep'", 
        "emacs=''", 
        "endgrent_r_proto='0'", 
        "endhostent_r_proto='0'", 
        "endnetent_r_proto='0'", 
        "endprotoent_r_proto='0'", 
        "endpwent_r_proto='0'", 
        "endservent_r_proto='0'", 
        "eunicefix=':'", 
        "exe_ext=''", 
        "expr='expr'", 
        "extensions='B Compress/Raw/Bzip2 Compress/Raw/Zlib Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Digest/SHA Encode Fcntl File/Glob Filter/Util/Call Hash/Util Hash/Util/FieldHash I18N/Langinfo IO IPC/SysV List/Util MIME/Base64 Math/BigInt/FastCalc Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Text/Soundex Time/HiRes Time/Piece Unicode/Normalize attributes mro re threads threads/shared Archive/Extract Archive/Tar Attribute/Handlers AutoLoader B/Debug B/Deparse B/Lint CGI CPAN CPANPLUS CPANPLUS/Dist/Build Class/ISA Devel/SelfStubber Digest Errno ExtUtils/CBuilder ExtUtils/Command ExtUtils/Constant ExtUtils/Install ExtUtils/MakeMaker ExtUtils/Manifest ExtUtils/ParseXS File/Fetch File/Path File/Temp FileCache Filter/Simple Getopt/Long I18N/LangTags IO/Compress IO/Zlib IPC/Cmd IPC/Open2 IPC/Open3 Locale/Codes Locale/Maketext Locale/Maketext/Simple Log/Message Log/Message/Simple Math/BigInt Math/BigRat Math/Complex Memoize Module/Build Module", 
        "extern_C='extern'", 
        "extras=''", 
        "fflushNULL='define'", 
        "fflushall='undef'", 
        "find=''", 
        "firstmakefile='makefile'", 
        "flex=''", 
        "fpossize='16'", 
        "fpostype='fpos_t'", 
        "freetype='void'", 
        "from=':'", 
        "full_ar='/mnt/u1/hen57/hak/armgeb-sf/usr/bin/armeb-linux-uclibcgnueabi-ar'", 
        "full_csh='/bin/tcsh'", 
        "full_sed='/bin/sed'", 
        "gccansipedantic=''", 
        "gccosandvers=''", 
        "gccversion='4.3.2'", 
        "getgrent_r_proto='0'", 
        "getgrgid_r_proto='0'", 
        "getgrnam_r_proto='0'", 
        "gethostbyaddr_r_proto='0'", 
        "gethostbyname_r_proto='0'", 
        "gethostent_r_proto='0'", 
        "getlogin_r_proto='0'", 
        "getnetbyaddr_r_proto='0'", 
        "getnetbyname_r_proto='0'", 
        "getnetent_r_proto='0'", 
        "getprotobyname_r_proto='0'", 
        "getprotobynumber_r_proto='0'", 
        "getprotoent_r_proto='0'", 
        "getpwent_r_proto='0'", 
        "getpwnam_r_proto='0'", 
        "getpwuid_r_proto='0'", 
        "getservbyname_r_proto='0'", 
        "getservbyport_r_proto='0'", 
        "getservent_r_proto='0'", 
        "getspnam_r_proto='0'", 
        "gidformat='\"lu\"'", 
        "gidsign='1'", 
        "gidsize='4'", 
        "gidtype='gid_t'", 
        "glibpth='/usr/shlib  /lib /usr/lib /usr/lib/386 /lib/386 /usr/ccs/lib /usr/ucblib /usr/local/lib '", 
        "gmake='gmake'", 
        "gmtime_r_proto='0'", 
        "gnulibc_version=''", 
        "grep='grep'", 
        "groupcat='cat /etc/group'", 
        "groupstype='gid_t'", 
        "gzip='gzip'", 
        "h_fcntl='false'", 
        "h_sysfile='true'", 
        "hint='recommended'", 
        "hostcat='cat /etc/hosts'", 
        "html1dir=' '", 
        "html1direxp=''", 
        "html3dir=' '", 
        "html3direxp=''", 
        "i16size='2'", 
        "i16type='short'", 
        "i32size='4'", 
        "i32type='long'", 
        "i64size='8'", 
        "i64type='long long'", 
        "i8size='1'", 
        "i8type='signed char'", 
        "i_arpainet='define'", 
        "i_assert='define'", 
        "i_bsdioctl=''", 
        "i_crypt='define'", 
        "i_db='undef'", 
        "i_dbm='undef'", 
        "i_dirent='define'", 
        "i_dld='undef'", 
        "i_dlfcn='define'", 
        "i_fcntl='undef'", 
        "i_float='define'", 
        "i_fp='undef'", 
        "i_fp_class='undef'", 
        "i_gdbm='undef'", 
        "i_gdbm_ndbm='undef'", 
        "i_gdbmndbm='undef'", 
        "i_grp='define'", 
        "i_ieeefp='undef'", 
        "i_inttypes='define'", 
        "i_langinfo='define'", 
        "i_libutil='undef'", 
        "i_limits='define'", 
        "i_locale='define'", 
        "i_machcthr='undef'", 
        "i_malloc='define'", 
        "i_mallocmalloc='undef'", 
        "i_math='define'", 
        "i_memory='undef'", 
        "i_mntent='define'", 
        "i_ndbm='undef'", 
        "i_netdb='define'", 
        "i_neterrno='undef'", 
        "i_netinettcp='define'", 
        "i_niin='define'", 
        "i_poll='define'", 
        "i_prot='undef'", 
        "i_pthread='define'", 
        "i_pwd='define'", 
        "i_rpcsvcdbm='undef'", 
        "i_sfio='undef'", 
        "i_sgtty='undef'", 
        "i_shadow='define'", 
        "i_socks='undef'", 
        "i_stdarg='define'", 
        "i_stddef='define'", 
        "i_stdlib='define'", 
        "i_string='define'", 
        "i_sunmath='undef'", 
        "i_sysaccess='undef'", 
        "i_sysdir='define'", 
        "i_sysfile='define'", 
        "i_sysfilio='undef'", 
        "i_sysin='undef'", 
        "i_sysioctl='define'", 
        "i_syslog='define'", 
        "i_sysmman='define'", 
        "i_sysmode='undef'", 
        "i_sysmount='define'", 
        "i_sysndir='undef'", 
        "i_sysparam='define'", 
        "i_syspoll='define'", 
        "i_sysresrc='define'", 
        "i_syssecrt='undef'", 
        "i_sysselct='define'", 
        "i_syssockio='undef'", 
        "i_sysstat='define'", 
        "i_sysstatfs='define'", 
        "i_sysstatvfs='define'", 
        "i_systime='define'", 
        "i_systimek='undef'", 
        "i_systimes='define'", 
        "i_systypes='define'", 
        "i_sysuio='define'", 
        "i_sysun='define'", 
        "i_sysutsname='define'", 
        "i_sysvfs='define'", 
        "i_syswait='define'", 
        "i_termio='undef'", 
        "i_termios='define'", 
        "i_time='define'", 
        "i_unistd='define'", 
        "i_ustat='define'", 
        "i_utime='define'", 
        "i_values='define'", 
        "i_varargs='undef'", 
        "i_varhdr='stdarg.h'", 
        "i_vfork='undef'", 
        "ignore_versioned_solibs='y'", 
        "inc_version_list=' '", 
        "inc_version_list_init='0'", 
        "incpath=''", 
        "inews=''", 
        "initialinstalllocation='/mnt/u1/hen57/hak/armgeb-sf/staticperl/perl/bin'", 
        "installarchlib='/mnt/u1/hen57/hak/armgeb-sf/staticperl/perl/lib'", 
        "installbin='/mnt/u1/hen57/hak/armgeb-sf/staticperl/perl/bin'", 
        "installhtml1dir=''", 
        "installhtml3dir=''", 
        "installman1dir='undef'", 
        "installman3dir='undef'", 
        "installprefix='/mnt/u1/hen57/hak/armgeb-sf/staticperl/perl'", 
        "installprefixexp='/mnt/u1/hen57/hak/armgeb-sf/staticperl/perl'", 
        "installprivlib='/mnt/u1/hen57/hak/armgeb-sf/staticperl/perl/lib'", 
        "installscript='/mnt/u1/hen57/hak/armgeb-sf/staticperl/perl/bin'", 
        "installsitearch='/mnt/u1/hen57/hak/armgeb-sf/staticperl/perl/lib'", 
        "installsitebin='/mnt/u1/hen57/hak/armgeb-sf/staticperl/perl/bin'", 
        "installsitehtml1dir=''", 
        "installsitehtml3dir=''", 
        "installsitelib='/mnt/u1/hen57/hak/armgeb-sf/staticperl/perl/lib'", 
        "installsiteman1dir='undef'", 
        "installsiteman3dir='undef'", 
        "installsitescript='/mnt/u1/hen57/hak/armgeb-sf/staticperl/perl/bin'", 
        "installstyle='lib'", 
        "installusrbinperl='undef'", 
        "installvendorarch=''", 
        "installvendorbin=''", 
        "installvendorhtml1dir=''", 
        "installvendorhtml3dir=''", 
        "installvendorlib=''", 
        "installvendorman1dir=''", 
        "installvendorman3dir=''", 
        "installvendorscript=''", 
        "intsize='4'", 
        "issymlink='test -h'", 
        "ivdformat='\"ld\"'", 
        "ivsize='4'", 
        "ivtype='long'", 
        "known_extensions='B Compress/Raw/Bzip2 Compress/Raw/Zlib Cwd DB_File Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Digest/SHA Encode Fcntl File/Glob Filter/Util/Call GDBM_File Hash/Util Hash/Util/FieldHash I18N/Langinfo IO IPC/SysV List/Util MIME/Base64 Math/BigInt/FastCalc NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Text/Soundex Time/HiRes Time/Piece Unicode/Normalize VMS/DCLsym VMS/Stdio Win32 Win32API/File Win32CORE XS/APItest XS/APItest/KeywordRPN XS/Typemap attributes mro re threads threads/shared '", 
        "ksh=''", 
        "ld='ld'", 
        "lddlflags=''", 
        "ldflags=' '", 
        "ldflags_uselargefiles=''", 
        "ldlibpthname='LD_LIBRARY_PATH'", 
        "less='less'", 
        "lib_ext='.a'", 
        "libc=''", 
        "libdb_needs_pthread='N'", 
        "libperl='libperl.a'", 
        "libpth='/mnt/u1/hen57/hak/armgeb-sf/usr/lib'", 
        "libs='-lm -lcrypt'", 
        "libsdirs=' /mnt/u1/hen57/hak/armgeb-sf/usr/lib'", 
        "libsfiles=' libnsl.so libgdbm.a libdl.so libutil.so libc.so libgdbm_compat.a'", 
        "libsfound=' /mnt/u1/hen57/hak/armgeb-sf/usr/lib/libnsl.so /mnt/u1/hen57/hak/armgeb-sf/usr/lib/libgdbm.a /mnt/u1/hen57/hak/armgeb-sf/usr/lib/libdl.so /mnt/u1/hen57/hak/armgeb-sf/usr/lib/libutil.so /mnt/u1/hen57/hak/armgeb-sf/usr/lib/libc.so /mnt/u1/hen57/hak/armgeb-sf/usr/lib/libgdbm_compat.a'", 
        "libspath=' /mnt/u1/hen57/hak/armgeb-sf/usr/lib'", 
        "libswanted='sfio socket inet nsl nm ndbm gdbm dbm db malloc dl dld ld sun m crypt sec util c cposix posix ucb BSD gdbm_compat'", 
        "libswanted_uselargefiles=''", 
        "line=''", 
        "lint=''", 
        "lkflags=''", 
        "ln='ln'", 
        "lns='/bin/ln -s'", 
        "localtime_r_proto='0'", 
        "locincpth='/usr/local/include /opt/local/include /usr/gnu/include /opt/gnu/include /usr/GNU/include /opt/GNU/include'", 
        "loclibpth='/usr/local/lib /opt/local/lib /usr/gnu/lib /opt/gnu/lib /usr/GNU/lib /opt/GNU/lib'", 
        "longdblsize='8'", 
        "longlongsize='8'", 
        "longsize='4'", 
        "lpr=''", 
        "ls='ls'", 
        "lseeksize='4'", 
        "lseektype='off_t'", 
        "mad='undef'", 
        "madlyh=''", 
        "madlyobj=''", 
        "madlysrc=''", 
        "mail=''", 
        "mailx=''", 
        "make='make'", 
        "make_set_make='#'", 
        "mallocobj=''", 
        "mallocsrc=''", 
        "malloctype='void *'", 
        "man1dir='undef'", 
        "man1direxp='undef'", 
        "man1ext='1'", 
        "man3dir='undef'", 
        "man3direxp='undef'", 
        "man3ext='3'", 
        "mips_type=''", 
        "mistrustnm=''", 
        "mkdir='mkdir'", 
        "mmaptype='void *'", 
        "modetype='mode_t'", 
        "more='more'", 
        "multiarch='undef'", 
        "myarchname='armgeb-sf'", 
        "mydomain=''", 
        "myhostname='n20'", 
        "myuname='Linux n20 2.6.18-164.el5 #1 SMP Tue Aug 18 15:51:48 EDT 2009 x86_64 GNU/Linux'", 
        "n='-n'", 
        "need_va_copy='undef'", 
        "netdb_hlen_type='size_t'", 
        "netdb_host_type='const void *'", 
        "netdb_name_type='const char *'", 
        "netdb_net_type='in_addr_t'", 
        "nm='armeb-linux-uclibcgnueabi-nm'", 
        "nm_opt=''", 
        "nm_so_opt='--dynamic'", 
        "nonxs_ext='Archive/Extract Archive/Tar Attribute/Handlers AutoLoader B/Debug B/Deparse B/Lint CGI CPAN CPANPLUS CPANPLUS/Dist/Build Class/ISA Devel/SelfStubber Digest Errno ExtUtils/CBuilder ExtUtils/Command ExtUtils/Constant ExtUtils/Install ExtUtils/MakeMaker ExtUtils/Manifest ExtUtils/ParseXS File/Fetch File/Path File/Temp FileCache Filter/Simple Getopt/Long I18N/LangTags IO/Compress IO/Zlib IPC/Cmd IPC/Open2 IPC/Open3 Locale/Codes Locale/Maketext Locale/Maketext/Simple Log/Message Log/Message/Simple Math/BigInt Math/BigRat Math/Complex Memoize Module/Build Module/CoreList Module/Load Module/Load/Conditional Module/Loaded Module/Pluggable NEXT Net/Ping Object/Accessor Package/Constants Params/Check Parse/CPAN/Meta PerlIO/via/QuotedPrint Pod/Escapes Pod/LaTeX Pod/Parser Pod/Perldoc Pod/Plainer Pod/Simple Safe SelfLoader Shell Switch Term/ANSIColor Term/Cap Term/UI Test Test/Harness Test/Simple Text/Balanced Text/ParseWords Text/Tabs Thread/Queue Thread/Semaphore Tie/File Tie/Memoize Tie/RefHash Time/Local U", 
        "nroff='nroff'", 
        "nvEUformat='\"E\"'", 
        "nvFUformat='\"F\"'", 
        "nvGUformat='\"G\"'", 
        "nv_overflows_integers_at='256.0*256.0*256.0*256.0*256.0*256.0*2.0*2.0*2.0*2.0*2.0'", 
        "nv_preserves_uv_bits='32'", 
        "nveformat='\"e\"'", 
        "nvfformat='\"f\"'", 
        "nvgformat='\"g\"'", 
        "nvsize='8'", 
        "nvtype='double'", 
        "o_nonblock='O_NONBLOCK'", 
        "obj_ext='.o'", 
        "old_pthread_create_joinable=''", 
        "optimize='-DNDEBUG -Os -fdata-sections -ffunction-sections -fno-exceptions'", 
        "orderlib='false'", 
        "osname='linux'", 
        "osvers='2.6.18-164.el5'", 
        "otherlibdirs=' '", 
        "package='perl5'", 
        "pager='/usr/bin/less'", 
        "passcat='cat /etc/passwd'", 
        "patchlevel='12'", 
        "path_sep=':'", 
        "perl5='/opt/bin/perl'", 
        "perl=''", 
        "perl_patchlevel=''", 
        "perladmin='teigwarten@yahoo.com.xx'", 
        "perllibs='-lm -lcrypt'", 
        "perlpath='/mnt/u1/hen57/hak/armgeb-sf/staticperl/perl/bin/perl'", 
        "pg='pg'", 
        "phostname='hostname'", 
        "pidtype='pid_t'", 
        "plibpth='/lib/x86_64-linux-gnu/4.8 /lib/x86_64-linux-gnu /lib/../lib /usr/lib/x86_64-linux-gnu/4.8 /usr/lib/x86_64-linux-gnu /usr/lib/../lib /lib /usr/lib'", 
        "pmake=''", 
        "prefix='/mnt/u1/hen57/hak/armgeb-sf/staticperl/perl'", 
        "prefixexp='/mnt/u1/hen57/hak/armgeb-sf/staticperl/perl'", 
        "privlib='/mnt/u1/hen57/hak/armgeb-sf/staticperl/perl/lib'", 
        "privlibexp='/mnt/u1/hen57/hak/armgeb-sf/staticperl/perl/lib'", 
        "procselfexe='\"/proc/self/exe\"'", 
        "prototype='define'", 
        "ptrsize='4'", 
        "quadkind='3'", 
        "quadtype='long long'", 
        "randbits='48'", 
        "randfunc='drand48'", 
        "random_r_proto='0'", 
        "randseedtype='long'", 
        "ranlib='/mnt/u1/hen57/hak/armgeb-sf/usr/bin/armeb-linux-uclibcgnueabi-ranlib'", 
        "rd_nodata='-1'", 
        "readdir64_r_proto='0'", 
        "readdir_r_proto='0'", 
        "revision='5'", 
        "rm='rm'", 
        "rm_try='/bin/rm -f try try a.out .out try.[cho] try..o core core.try* try.core*'", 
        "rmail=''", 
        "run=''", 
        "runnm='false'", 
        "sGMTIME_max='2147483647'", 
        "sGMTIME_min='-2147483648'", 
        "sLOCALTIME_max='2147483647'", 
        "sLOCALTIME_min='-2147483648'", 
        "sPRIEUldbl='\"E\"'", 
        "sPRIFUldbl='\"F\"'", 
        "sPRIGUldbl='\"G\"'", 
        "sPRIXU64='\"LX\"'", 
        "sPRId64='\"Ld\"'", 
        "sPRIeldbl='\"e\"'", 
        "sPRIfldbl='\"f\"'", 
        "sPRIgldbl='\"g\"'", 
        "sPRIi64='\"Li\"'", 
        "sPRIo64='\"Lo\"'", 
        "sPRIu64='\"Lu\"'", 
        "sPRIx64='\"Lx\"'", 
        "sSCNfldbl='\"f\"'", 
        "sched_yield='undef'", 
        "scriptdir='/mnt/u1/hen57/hak/armgeb-sf/staticperl/perl/bin'", 
        "scriptdirexp='/mnt/u1/hen57/hak/armgeb-sf/staticperl/perl/bin'", 
        "sed='sed'", 
        "seedfunc='srand48'", 
        "selectminbits='32'", 
        "selecttype='fd_set *'", 
        "sendmail=''", 
        "setgrent_r_proto='0'", 
        "sethostent_r_proto='0'", 
        "setlocale_r_proto='0'", 
        "setnetent_r_proto='0'", 
        "setprotoent_r_proto='0'", 
        "setpwent_r_proto='0'", 
        "setservent_r_proto='0'", 
        "sh='/bin/sh'", 
        "shar=''", 
        "sharpbang='#!'", 
        "shmattype='void *'", 
        "shortsize='2'", 
        "shrpenv=''", 
        "shsharp='true'", 
        "sig_count='65'", 
        "sig_name='ZERO HUP INT QUIT ILL TRAP ABRT BUS FPE KILL USR1 SEGV USR2 PIPE ALRM TERM STKFLT CHLD CONT STOP TSTP TTIN TTOU URG XCPU XFSZ VTALRM PROF WINCH IO PWR SYS RTMIN NUM33 NUM34 NUM35 NUM36 NUM37 NUM38 NUM39 NUM40 NUM41 NUM42 NUM43 NUM44 NUM45 NUM46 NUM47 NUM48 NUM49 NUM50 NUM51 NUM52 NUM53 NUM54 NUM55 NUM56 NUM57 NUM58 NUM59 NUM60 NUM61 NUM62 NUM63 RTMAX IOT CLD POLL UNUSED '", 
        "sig_name_init='\"ZERO\", \"HUP\", \"INT\", \"QUIT\", \"ILL\", \"TRAP\", \"ABRT\", \"BUS\", \"FPE\", \"KILL\", \"USR1\", \"SEGV\", \"USR2\", \"PIPE\", \"ALRM\", \"TERM\", \"STKFLT\", \"CHLD\", \"CONT\", \"STOP\", \"TSTP\", \"TTIN\", \"TTOU\", \"URG\", \"XCPU\", \"XFSZ\", \"VTALRM\", \"PROF\", \"WINCH\", \"IO\", \"PWR\", \"SYS\", \"RTMIN\", \"NUM33\", \"NUM34\", \"NUM35\", \"NUM36\", \"NUM37\", \"NUM38\", \"NUM39\", \"NUM40\", \"NUM41\", \"NUM42\", \"NUM43\", \"NUM44\", \"NUM45\", \"NUM46\", \"NUM47\", \"NUM48\", \"NUM49\", \"NUM50\", \"NUM51\", \"NUM52\", \"NUM53\", \"NUM54\", \"NUM55\", \"NUM56\", \"NUM57\", \"NUM58\", \"NUM59\", \"NUM60\", \"NUM61\", \"NUM62\", \"NUM63\", \"RTMAX\", \"IOT\", \"CLD\", \"POLL\", \"UNUSED\", 0'", 
        "sig_num='0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 6 17 29 31 '", 
        "sig_num_init='0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 6, 17, 29, 31, 0'", 
        "sig_size='69'", 
        "signal_t='void'", 
        "sitearch='/mnt/u1/hen57/hak/armgeb-sf/staticperl/perl/lib'", 
        "sitearchexp='/mnt/u1/hen57/hak/armgeb-sf/staticperl/perl/lib'", 
        "sitebin='/mnt/u1/hen57/hak/armgeb-sf/staticperl/perl/bin'", 
        "sitebinexp='/mnt/u1/hen57/hak/armgeb-sf/staticperl/perl/bin'", 
        "sitehtml1dir=''", 
        "sitehtml1direxp=''", 
        "sitehtml3dir=''", 
        "sitehtml3direxp=''", 
        "sitelib='/mnt/u1/hen57/hak/armgeb-sf/staticperl/perl/lib'", 
        "sitelib_stem='/mnt/u1/hen57/hak/armgeb-sf/staticperl/perl/lib'", 
        "sitelibexp='/mnt/u1/hen57/hak/armgeb-sf/staticperl/perl/lib'", 
        "siteman1dir='undef'", 
        "siteman1direxp='undef'", 
        "siteman3dir='undef'", 
        "siteman3direxp='undef'", 
        "siteprefix='/mnt/u1/hen57/hak/armgeb-sf/staticperl/perl'", 
        "siteprefixexp='/mnt/u1/hen57/hak/armgeb-sf/staticperl/perl'", 
        "sitescript='/mnt/u1/hen57/hak/armgeb-sf/staticperl/perl/bin'", 
        "sitescriptexp='/mnt/u1/hen57/hak/armgeb-sf/staticperl/perl/bin'", 
        "sizesize='4'", 
        "sizetype='size_t'", 
        "sleep=''", 
        "smail=''", 
        "so='so'", 
        "sockethdr=''", 
        "socketlib=''", 
        "socksizetype='socklen_t'", 
        "sort='sort'", 
        "spackage='Perl5'", 
        "spitshell='cat'", 
        "srand48_r_proto='0'", 
        "srandom_r_proto='0'", 
        "src='.'", 
        "ssizetype='ssize_t'", 
        "startperl='#!/mnt/u1/hen57/hak/armgeb-sf/staticperl/perl/bin/perl'", 
        "startsh='#!/bin/sh'", 
        "static_ext='B Compress/Raw/Bzip2 Compress/Raw/Zlib Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Digest/SHA Encode Fcntl File/Glob Filter/Util/Call Hash/Util Hash/Util/FieldHash I18N/Langinfo IO IPC/SysV List/Util MIME/Base64 Math/BigInt/FastCalc Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Text/Soundex Time/HiRes Time/Piece Unicode/Normalize attributes mro re threads threads/shared'", 
        "stdchar='char'", 
        "stdio_base='((fp)->_IO_read_base)'", 
        "stdio_bufsiz='((fp)->_IO_read_end - (fp)->_IO_read_base)'", 
        "stdio_cnt='((fp)->_IO_read_end - (fp)->_IO_read_ptr)'", 
        "stdio_filbuf=''", 
        "stdio_ptr='((fp)->_IO_read_ptr)'", 
        "stdio_stream_array=''", 
        "strerror_r_proto='0'", 
        "strings='/usr/include/string.h'", 
        "submit=''", 
        "subversion='5'", 
        "sysman='/usr/share/man/man1'", 
        "tail=''", 
        "tar=''", 
        "targetarch=''", 
        "tbl=''", 
        "tee=''", 
        "test='test'", 
        "timeincl='/usr/include/sys/time.h /usr/include/time.h '", 
        "timetype='time_t'", 
        "tmpnam_r_proto='0'", 
        "to=':'", 
        "touch='touch'", 
        "tr='tr'", 
        "trnl='\\n'", 
        "troff=''", 
        "ttyname_r_proto='0'", 
        "u16size='2'", 
        "u16type='unsigned short'", 
        "u32size='4'", 
        "u32type='unsigned long'", 
        "u64size='8'", 
        "u64type='unsigned long long'", 
        "u8size='1'", 
        "u8type='unsigned char'", 
        "uidformat='\"lu\"'", 
        "uidsign='1'", 
        "uidsize='4'", 
        "uidtype='uid_t'", 
        "uname='uname'", 
        "uniq='uniq'", 
        "uquadtype='unsigned long long'", 
        "use5005threads='undef'", 
        "use64bitall='undef'", 
        "use64bitint='undef'", 
        "usecrosscompile='undef'", 
        "usedevel='undef'", 
        "usedl='undef'", 
        "usedtrace='undef'", 
        "usefaststdio='undef'", 
        "useithreads='undef'", 
        "uselargefiles='undef'", 
        "uselongdouble='undef'", 
        "usemallocwrap='define'", 
        "usemorebits='undef'", 
        "usemultiplicity='undef'", 
        "usemymalloc='n'", 
        "usenm='false'", 
        "useopcode='true'", 
        "useperlio='define'", 
        "useposix='true'", 
        "usereentrant='undef'", 
        "userelocatableinc='undef'", 
        "usesfio='false'", 
        "useshrplib='false'", 
        "usesitecustomize='undef'", 
        "usesocks='undef'", 
        "usethreads='undef'", 
        "usevendorprefix='undef'", 
        "usevfork='false'", 
        "usrinc='/usr/include'", 
        "uuname=''", 
        "uvXUformat='\"lX\"'", 
        "uvoformat='\"lo\"'", 
        "uvsize='4'", 
        "uvtype='unsigned long'", 
        "uvuformat='\"lu\"'", 
        "uvxformat='\"lx\"'", 
        "vaproto='define'", 
        "vendorarch=''", 
        "vendorarchexp=''", 
        "vendorbin=''", 
        "vendorbinexp=''", 
        "vendorhtml1dir=' '", 
        "vendorhtml1direxp=''", 
        "vendorhtml3dir=' '", 
        "vendorhtml3direxp=''", 
        "vendorlib=''", 
        "vendorlib_stem=''", 
        "vendorlibexp=''", 
        "vendorman1dir=' '", 
        "vendorman1direxp=''", 
        "vendorman3dir=' '", 
        "vendorman3direxp=''", 
        "vendorprefix=''", 
        "vendorprefixexp=''", 
        "vendorscript=''", 
        "vendorscriptexp=''", 
        "version='5.12.5'", 
        "version_patchlevel_string='version 12 subversion 5'", 
        "versiononly='undef'", 
        "voidflags='15'", 
        "xlibpth='/usr/lib/386 /lib/386'", 
        "yacc='/usr/bin/byacc'", 
        "yaccflags=''", 
        "zcat=''", 
        "zip='zip'", 
        "ccflags_nolargefiles='-g -DPERL_DISABLE_PMC -DPERL_ARENA_SIZE=16376 -DNO_PERL_MALLOC_ENV -D_GNU_SOURCE -DNDEBUG -fno-strict-aliasing -pipe -I/usr/local/include'", 
        "ldflags_nolargefiles=' '", 
        "libs_nolargefiles='-lm -lcrypt'", 
        "libswanted_nolargefiles='sfio socket inet nsl nm ndbm gdbm dbm db malloc dl dld ld sun m crypt sec util c cposix posix ucb BSD gdbm_compat'", 
        "EOVIRTUAL", 
        "Coro/Channel.pmpackage Coro::Channel;use common::sense;use Coro ();use Coro::Semaphore ();our $VERSION=6.37;sub DATA (){0 }sub SGET (){1 }sub SPUT (){2 }sub new {bless [[],(Coro::Semaphore::_alloc 0),(Coro::Semaphore::_alloc +($_[1]|| 2_000_000_000)- 1),]}sub put {push @{$_[0][DATA]},$_[1];Coro::Semaphore::up $_[0][SGET];Coro::Semaphore::down $_[0][SPUT];}sub get {Coro::Semaphore::down $_[0][SGET];Coro::Semaphore::up $_[0][SPUT];shift @{$_[0][DATA]}}sub shutdown {Coro::Semaphore::adjust $_[0][SGET],1_000_000_000;}sub size {scalar @{$_[0][DATA]}}sub adjust {Coro::Semaphore::adjust $_[0][SPUT],$_[1];}1;EV/MakeMaker.pmpackage EV::MakeMaker;BEGIN {eval {require warnings }&& warnings->unimport (\"uninitialized\")}use Config;use base 'Exporter';@EXPORT_OK=qw(&ev_args $installsitearch);my %opt;for my $opt (split /:+/,$ENV{PERL_MM_OPT}){my ($k,$v)=split /=/,$opt;$opt{$k}=$v;}my $extra=$Config{sitearch};$extra =~ s/$Config{prefix}/$opt{PREFIX}/ if exists $opt{PREFIX};for my $d ($extra,@INC){if (-e \"$d/EV/EVAPI.h\"){$inst", 
        "AnyEvent::Fork - everything you wanted to use fork() for, but couldn't", 
        "=head1 SYNOPSIS", 
        "   use AnyEvent::Fork;", 
        "   AnyEvent::Fork", 
        "      ->new", 
        "      ->require (\"MyModule\")", 
        "      ->run (\"MyModule::server\", my $cv = AE::cv);", 
        "   my $fh = $cv->recv;", 
        "=head1 DESCRIPTION", 
        "This module allows you to create new processes, without actually forking", 
        "them from your current process (avoiding the problems of forking), but", 
        "preserving most of the advantages of fork.", 
        "It can be used to create new worker processes or new independent", 
        "subprocesses for short- and long-running jobs, process pools (e.g. for use", 
        "in pre-forked servers) but also to spawn new external processes (such as", 
        "CGI scripts from a web server), which can be faster (and more well behaved)", 
        "than using fork+exec in big processes.", 
        "Special care has been taken to make this module useful from other modules,", 
        "while still supporting specialised environments such as L<App::Staticperl>", 
        "or L<PAR::Packer>.", 
        "=head2 WHAT THIS MODULE IS NOT", 
        "This module only creates processes and lets you pass file handles and", 
        "strings to it, and run perl code. It does not implement any kind of RPC -", 
        "there is no back channel from the process back to you, and there is no RPC", 
        "or message passing going on.", 
        "If you need some form of RPC, you could use the L<AnyEvent::Fork::RPC>", 
        "companion module, which adds simple RPC/job queueing to a process created", 
        "by this module.", 
        "And if you need some automatic process pool management on top of", 
        "L<AnyEvent::Fork::RPC>, you can look at the L<AnyEvent::Fork::Pool>", 
        "companion module.", 
        "Or you can implement it yourself in whatever way you like: use some", 
        "message-passing module such as L<AnyEvent::MP>, some pipe such as", 
        "L<AnyEvent::ZeroMQ>, use L<AnyEvent::Handle> on both sides to send", 
        "e.g. JSON or Storable messages, and so on.", 
        "=head2 COMPARISON TO OTHER MODULES", 
        "There is an abundance of modules on CPAN that do \"something fork\", such as", 
        "L<Parallel::ForkManager>, L<AnyEvent::ForkManager>, L<AnyEvent::Worker>", 
        "or L<AnyEvent::Subprocess>. There are modules that implement their own", 
        "process management, such as L<AnyEvent::DBI>.", 
        "The problems that all these modules try to solve are real, however, none", 
        "of them (from what I have seen) tackle the very real problems of unwanted", 
        "memory sharing, efficiency, not being able to use event processing or", 
        "similar modules in the processes they create.", 
        "This module doesn't try to replace any of them - instead it tries to solve", 
        "the problem of creating processes with a minimum of fuss and overhead (and", 
        "also luxury). Ideally, most of these would use AnyEvent::Fork internally,", 
        "except they were written before AnyEvent:Fork was available, so obviously", 
        "had to roll their own.", 
        "=head2 PROBLEM STATEMENT", 
        "There are two traditional ways to implement parallel processing on UNIX", 
        "like operating systems - fork and process, and fork+exec and process. They", 
        "have different advantages and disadvantages that I describe below,", 
        "together with how this module tries to mitigate the disadvantages.", 
        "=over 4", 
        "=item Forking from a big process can be very slow.", 
        "A 5GB process needs 0.05s to fork on my 3.6GHz amd64 GNU/Linux box. This", 
        "overhead is often shared with exec (because you have to fork first), but", 
        "in some circumstances (e.g. when vfork is used), fork+exec can be much", 
        "faster.", 
        "This module can help here by telling a small(er) helper process to fork,", 
        "which is faster then forking the main process, and also uses vfork where", 
        "possible. This gives the speed of vfork, with the flexibility of fork.", 
        "=item Forking usually creates a copy-on-write copy of the parent", 
        "process.", 
        "For example, modules or data files that are loaded will not use additional", 
        "memory after a fork. When exec'ing a new process, modules and data files", 
        "might need to be loaded again, at extra CPU and memory cost. But when", 
        "forking, literally all data structures are copied - if the program frees", 
        "them and replaces them by new data, the child processes will retain the", 
        "old version even if it isn't used, which can suddenly and unexpectedly", 
        "increase memory usage when freeing memory.", 
        "The trade-off is between more sharing with fork (which can be good or", 
        "bad), and no sharing with exec.", 
        "This module allows the main program to do a controlled fork, and allows", 
        "modules to exec processes safely at any time. When creating a custom", 
        "process pool you can take advantage of data sharing via fork without", 
        "risking to share large dynamic data structures that will blow up child", 
        "memory usage.", 
        "In other words, this module puts you into control over what is being", 
        "shared and what isn't, at all times.", 
        "=item Exec'ing a new perl process might be difficult.", 
        "For example, it is not easy to find the correct path to the perl", 
        "interpreter - C<$^X> might not be a perl interpreter at all.", 
        "This module tries hard to identify the correct path to the perl", 
        "interpreter. With a cooperative main program, exec'ing the interpreter", 
        "might not even be necessary, but even without help from the main program,", 
        "it will still work when used from a module.", 
        "=item Exec'ing a new perl process might be slow, as all necessary modules", 
        "have to be loaded from disk again, with no guarantees of success.", 
        "Long running processes might run into problems when perl is upgraded", 
        "and modules are no longer loadable because they refer to a different", 
        "perl version, or parts of a distribution are newer than the ones already", 
        "loaded.", 
        "This module supports creating pre-initialised perl processes to be used as", 
        "a template for new processes.", 
        "=item Forking might be impossible when a program is running.", 
        "For example, POSIX makes it almost impossible to fork from a", 
        "multi-threaded program while doing anything useful in the child - in", 
        "fact, if your perl program uses POSIX threads (even indirectly via", 
        "e.g. L<IO::AIO> or L<threads>), you cannot call fork on the perl level", 
        "anymore without risking corruption issues on a number of operating", 
        "systems.", 
        "This module can safely fork helper processes at any time, by calling", 
        "fork+exec in C, in a POSIX-compatible way (via L<Proc::FastSpawn>).", 
        "=item Parallel processing with fork might be inconvenient or difficult", 
        "to implement. Modules might not work in both parent and child.", 
        "For example, when a program uses an event loop and creates watchers it", 
        "becomes very hard to use the event loop from a child program, as the", 
        "watchers already exist but are only meaningful in the parent. Worse, a", 
        "module might want to use such a module, not knowing whether another module", 
        "or the main program also does, leading to problems.", 
        "Apart from event loops, graphical toolkits also commonly fall into the", 
        "\"unsafe module\" category, or just about anything that communicates with", 
        "the external world, such as network libraries and file I/O modules, which", 
        "usually don't like being copied and then allowed to continue in two", 
        "processes.", 
        "With this module only the main program is allowed to create new processes", 
        "by forking (because only the main program can know when it is still safe", 
        "to do so) - all other processes are created via fork+exec, which makes it", 
        "possible to use modules such as event loops or window interfaces safely.", 
        "=head1 EXAMPLES", 
        "=head2 Create a single new process, tell it to run your worker function.", 
        "   AnyEvent::Fork", 
        "      ->new", 
        "      ->require (\"MyModule\")", 
        "      ->run (\"MyModule::worker, sub {", 
        "         my ($master_filehandle) = @_;", 
        "         # now $master_filehandle is connected to the", 
        "         # $slave_filehandle in the new process.", 
        "      });", 
        "C<MyModule> might look like this:", 
        "   package MyModule;", 
        "   sub worker {", 
        "      my ($slave_filehandle) = @_;", 
        "      # now $slave_filehandle is connected to the $master_filehandle", 
        "      # in the original prorcess. have fun!", 
        "=head2 Create a pool of server processes all accepting on the same socket.", 
        "   # create listener socket", 
        "   my $listener = ...;", 
        "   # create a pool template, initialise it and give it the socket", 
        "   my $pool = AnyEvent::Fork", 
        "                 ->new", 
        "                 ->require (\"Some::Stuff\", \"My::Server\")", 
        "                 ->send_fh ($listener);", 
        "   # now create 10 identical workers", 
        "   for my $id (1..10) {", 
        "      $pool", 
        "         ->fork", 
        "         ->send_arg ($id)", 
        "         ->run (\"My::Server::run\");", 
        "   # now do other things - maybe use the filehandle provided by run", 
        "   # to wait for the processes to die. or whatever.", 
        "C<My::Server> might look like this:", 
        "   package My::Server;", 
        "   sub run {", 
        "      my ($slave, $listener, $id) = @_;", 
        "      close $slave; # we do not use the socket, so close it to save resources", 
        "      # we could go ballistic and use e.g. AnyEvent here, or IO::AIO,", 
        "      # or anything we usually couldn't do in a process forked normally.", 
        "      while (my $socket = $listener->accept) {", 
        "         # do sth. with new socket", 
        "      }", 
        "=head2 use AnyEvent::Fork as a faster fork+exec", 
        "This runs C</bin/echo hi>, with standard output redirected to F</tmp/log>", 
        "and standard error redirected to the communications socket. It is usually", 
        "faster than fork+exec, but still lets you prepare the environment.", 
        "   open my $output, \">/tmp/log\" or die \"$!\";", 
        "   AnyEvent::Fork", 
        "      ->new", 
        "      ->eval ('", 
        "           # compile a helper function for later use", 
        "           sub run {", 
        "              my ($fh, $output, @cmd) = @_;", 
        "              # perl will clear close-on-exec on STDOUT/STDERR", 
        "              open STDOUT, \">&\", $output or die;", 
        "              open STDERR, \">&\", $fh or die;", 
        "              exec @cmd;", 
        "           }", 
        "        ')", 
        "      ->send_fh ($output)", 
        "      ->send_arg (\"/bin/echo\", \"hi\")", 
        "      ->run (\"run\", my $cv = AE::cv);", 
        "   my $stderr = $cv->recv;", 
        "=head2 For stingy users: put the worker code into a C<DATA> section.", 
        "When you want to be stingy with files, you cna put your code into the", 
        "C<DATA> section of your module (or program):", 
        "   use AnyEvent::Fork;", 
        "   AnyEvent::Fork", 
        "      ->new", 
        "      ->eval (do { local $/; <DATA> })", 
        "      ->run (\"doit\", sub { ... });", 
        "   __DATA__", 
        "   sub doit {", 
        "      ... do something!", 
        "=head2 For stingy standalone programs: do not rely on external files at", 
        "For single-file scripts it can be inconvenient to rely on external", 
        "files - even when using < C<DATA> section, you still need to C<exec>", 
        "an external perl interpreter, which might not be available when using", 
        "L<App::Staticperl>, L<Urlader> or L<PAR::Packer> for example.", 
        "Two modules help here - L<AnyEvent::Fork::Early> forks a template process", 
        "for all further calls to C<new_exec>, and L<AnyEvent::Fork::Template>", 
        "forks the main program as a template process.", 
        "Here is how your main program should look like:", 
        "   #! perl", 
        "   # optional, as the very first thing.", 
        "   # in case modules want to create their own processes.", 
        "   use AnyEvent::Fork::Early;", 
        "   # next, load all modules you need in your template process", 
        "   use Example::My::Module", 
        "   use Example::Whatever;", 
        "   # next, put your run function definition and anything else you", 
        "   # need, but do not use code outside of BEGIN blocks.", 
        "   sub worker_run {", 
        "      my ($fh, @args) = @_;", 
        "      ...", 
        "   # now preserve everything so far as AnyEvent::Fork object", 
        "   # in ", 
        "TEMPLATE.", 
        "   use AnyEvent::Fork::Template;", 
        "   # do not put code outside of BEGIN blocks until here", 
        "   # now use the $TEMPLATE process in any way you like", 
        "   # for example: create 10 worker processes", 
        "   my @worker;", 
        "   my $cv = AE::cv;", 
        "   for (1..10) {", 
        "      $cv->begin;", 
        "      $TEMPLATE->fork->send_arg ($_)->run (\"worker_run\", sub {", 
        "         push @worker, shift;", 
        "         $cv->end;", 
        "      });", 
        "   $cv->recv;", 
        "=head1 CONCEPTS", 
        "This module can create new processes either by executing a new perl", 
        "process, or by forking from an existing \"template\" process.", 
        "All these processes are called \"child processes\" (whether they are direct", 
        "children or not), while the process that manages them is called the", 
        "\"parent process\".", 
        "Each such process comes with its own file handle that can be used to", 
        "communicate with it (it's actually a socket - one end in the new process,", 
        "one end in the main process), and among the things you can do in it are", 
        "load modules, fork new processes, send file handles to it, and execute", 
        "functions.", 
        "There are multiple ways to create additional processes to execute some", 
        "=over 4", 
        "=item fork a new process from the \"default\" template process, load code,", 
        "run it", 
        "This module has a \"default\" template process which it executes when it is", 
        "needed the first time. Forking from this process shares the memory used", 
        "for the perl interpreter with the new process, but loading modules takes", 
        "time, and the memory is not shared with anything else.", 
        "This is ideal for when you only need one extra process of a kind, with the", 
        "option of starting and stopping it on demand.", 
        "Example:", 
        "   AnyEvent::Fork", 
        "      ->new", 
        "      ->require (\"Some::Module\")", 
        "      ->run (\"Some::Module::run\", sub {", 
        "         my ($fork_fh) = @_;", 
        "      });", 
        "=item fork a new template process, load code, then fork processes off of", 
        "it and run the code", 
        "When you need to have a bunch of processes that all execute the same (or", 
        "very similar) tasks, then a good way is to create a new template process", 
        "for them, loading all the modules you need, and then create your worker", 
        "processes from this new template process.", 
        "This way, all code (and data structures) that can be shared (e.g. the", 
        "modules you loaded) is shared between the processes, and each new process", 
        "consumes relatively little memory of its own.", 
        "The disadvantage of this approach is that you need to create a template", 
        "process for the sole purpose of forking new processes from it, but if you", 
        "only need a fixed number of processes you can create them, and then destroy", 
        "the template process.", 
        "Example:", 
        "   my $template = AnyEvent::Fork->new->require (\"Some::Module\");", 
        "   for (1..10) {", 
        "      $template->fork->run (\"Some::Module::run\", sub {", 
        "         my ($fork_fh) = @_;", 
        "      });", 
        "   # at this point, you can keep $template around to fork new processes", 
        "   # later, or you can destroy it, which causes it to vanish.", 
        "=item execute a new perl interpreter, load some code, run it", 
        "This is relatively slow, and doesn't allow you to share memory between", 
        "multiple processes.", 
        "The only advantage is that you don't have to have a template process", 
        "hanging around all the time to fork off some new processes, which might be", 
        "an advantage when there are long time spans where no extra processes are", 
        "needed.", 
        "Example:", 
        "   AnyEvent::Fork", 
        "      ->new_exec", 
        "      ->require (\"Some::Module\")", 
        "      ->run (\"Some::Module::run\", sub {", 
        "         my ($fork_fh) = @_;", 
        "      });", 
        "=head1 THE C<AnyEvent::Fork> CLASS", 
        "This module exports nothing, and only implements a single class -", 
        "C<AnyEvent::Fork>.", 
        "There are two class constructors that both create new processes - C<new>", 
        "and C<new_exec>. The C<fork> method creates a new process by forking an", 
        "existing one and could be considered a third constructor.", 
        "Most of the remaining methods deal with preparing the new process, by", 
        "loading code, evaluating code and sending data to the new process. They", 
        "usually return the process object, so you can chain method calls.", 
        "If a process object is destroyed before calling its C<run> method, then", 
        "the process simply exits. After C<run> is called, all responsibility is", 
        "passed to the specified function.", 
        "As long as there is any outstanding work to be done, process objects", 
        "resist being destroyed, so there is no reason to store them unless you", 
        "need them later - configure and forget works just fine.", 
        "=over 4", 
        "package AnyEvent::Fork;", 
        "use common::sense;", 
        "use Errno ();", 
        "use AnyEvent;", 
        "use AnyEvent::Util ();", 
        "use IO::FDPass;", 
        "our $VERSION = 1.2;", 
        "# the early fork template process", 
        "our $EARLY;", 
        "# the empty template process", 
        "our $TEMPLATE;", 
        "sub QUEUE() { 0 }", 
        "sub FH()    { 1 }", 
        "sub WW()    { 2 }", 
        "sub PID()   { 3 }", 
        "sub CB()    { 4 }", 
        "sub _new {", 
        "   my ($self, $fh, $pid) = @_;", 
        "   AnyEvent::Util::fh_nonblocking $fh, 1;", 
        "   $self = bless [", 
        "      [],    # write queue - strings or fd's", 
        "      $fh,", 
        "      undef, # AE watcher", 
        "      $pid,", 
        "   ], $self;", 
        "   $self", 
        "sub _cmd {", 
        "   my $self = shift;", 
        "   # ideally, we would want to use \"a (w/a)*\" as format string, but perl", 
        "   # versions from at least 5.8.9 to 5.16.3 are all buggy and can't unpack", 
        "   # it.", 
        "   push @{ $self->[QUEUE] }, pack \"a L/a*\", $_[0], $_[1];", 
        "   $self->[WW] ||= AE::io $self->[FH], 1, sub {", 
        "      do {", 
        "         # send the next \"thing\" in the queue - either a reference to an fh,", 
        "         # or a plain string.", 
        "         if (ref $self->[QUEUE][0]) {", 
        "            # send fh", 
        "            unless (IO::FDPass::send fileno $self->[FH], fileno ${ $self->[QUEUE][0] }) {", 
        "               return if $! == Errno::EAGAIN || $! == Errno::EWOULDBLOCK;", 
        "               undef $self->[WW];", 
        "               die \"AnyEvent::Fork: file descriptor send failure: $!\";", 
        "            }", 
        "            shift @{ $self->[QUEUE] };", 
        "         } else {", 
        "            # send string", 
        "            my $len = syswrite $self->[FH], $self->[QUEUE][0];", 
        "            unless ($len) {", 
        "               return if $! == Errno::EAGAIN || $! == Errno::EWOULDBLOCK;", 
        "               undef $self->[WW];", 
        "               die \"AnyEvent::Fork: command write failure: $!\";", 
        "            }", 
        "            substr $self->[QUEUE][0], 0, $len, \"\";", 
        "            shift @{ $self->[QUEUE] } unless length $self->[QUEUE][0];", 
        "         }", 
        "      } while @{ $self->[QUEUE] };", 
        "      # everything written", 
        "      undef $self->[WW];", 
        "      # invoke run callback, if any", 
        "      if ($self->[CB]) {", 
        "         $self->[CB]->($self->[FH]);", 
        "         @$self = ();", 
        "      }", 
        "   () # make sure we don't leak the watcher", 
        "# fork template from current process, used by AnyEvent::Fork::Early/Template", 
        "sub _new_fork {", 
        "   my ($fh, $slave) = AnyEvent::Util::portable_socketpair;", 
        "   my $parent = $$;", 
        "   my $pid = fork;", 
        "   if ($pid eq 0) {", 
        "      require AnyEvent::Fork::Serve;", 
        "      $AnyEvent::Fork::Serve::OWNER = $parent;", 
        "      close $fh;", 
        "      $0 = \"$_[1] of $parent\";", 
        "      AnyEvent::Fork::Serve::serve ($slave);", 
        "      exit 0;", 
        "   } elsif (!$pid) {", 
        "      die \"AnyEvent::Fork::Early/Template: unable to fork template process: $!\";", 
        "   AnyEvent::Fork->_new ($fh, $pid)", 
        "=item my $proc = new AnyEvent::Fork", 
        "Create a new \"empty\" perl interpreter process and returns its process", 
        "object for further manipulation.", 
        "The new process is forked from a template process that is kept around", 
        "for this purpose. When it doesn't exist yet, it is created by a call to", 
        "C<new_exec> first and then stays around for future calls.", 
        "sub new {", 
        "   my $class = shift;", 
        "   $TEMPLATE ||= $class->new_exec;", 
        "   $TEMPLATE->fork", 
        "=item $new_proc = $proc->fork", 
        "Forks C<$proc>, creating a new process, and returns the process object", 
        "of the new process.", 
        "If any of the C<send_> functions have been called before fork, then they", 
        "will be cloned in the child. For example, in a pre-forked server, you", 
        "might C<send_fh> the listening socket into the template process, and then", 
        "keep calling C<fork> and C<run>.", 
        "sub fork {", 
        "   my ($self) = @_;", 
        "   my ($fh, $slave) = AnyEvent::Util::portable_socketpair;", 
        "   $self->send_fh ($slave);", 
        "   $self->_cmd (\"f\");", 
        "   AnyEvent::Fork->_new ($fh)", 
        "=item my $proc = new_exec AnyEvent::Fork", 
        "Create a new \"empty\" perl interpreter process and returns its process", 
        "object for further manipulation.", 
        "Unlike the C<new> method, this method I<always> spawns a new perl process", 
        "(except in some cases, see L<AnyEvent::Fork::Early> for details). This", 
        "reduces the amount of memory sharing that is possible, and is also slower.", 
        "You should use C<new> whenever possible, except when having a template", 
        "process around is unacceptable.", 
        "The path to the perl interpreter is divined using various methods - first", 
        "C<$^X> is investigated to see if the path ends with something that looks", 
        "as if it were the perl interpreter. Failing this, the module falls back to", 
        "using C<$Config::Config{perlpath}>.", 
        "The path to perl can also be overriden by setting the global variable", 
        "C<$AnyEvent::Fork::PERL> - it's value will be used for all subsequent", 
        "invocations.", 
        "our $PERL;", 
        "sub new_exec {", 
        "   my ($self) = @_;", 
        "   return $EARLY->fork", 
        "      if $EARLY;", 
        "   unless (defined $PERL) {", 
        "      # first find path of perl", 
        "      my $perl = $", 
        "      # first we try $^X, but the path must be absolute (always on win32), and end in sth.", 
        "      # that looks like perl. this obviously only works for posix and win32", 
        "      unless (", 
        "         ($^O eq \"MSWin32\" || $perl =~ m%^/%)", 
        "         && $perl =~ m%[/\\\\]perl(?:[0-9]+(\\.[0-9]+)+)?(\\.exe)?$%i", 
        "      ) {", 
        "         # if it doesn't look perlish enough, try Config", 
        "         require Config;", 
        "         $perl = $Config::Config{perlpath};", 
        "         $perl =~ s/(?:\\Q$Config::Config{_exe}\\E)?$/$Config::Config{_exe}/;", 
        "      }", 
        "      $PERL = $perl;", 
        "   require Proc::FastSpawn;", 
        "   my ($fh, $slave) = AnyEvent::Util::portable_socketpair;", 
        "   Proc::FastSpawn::fd_inherit (fileno $slave);", 
        "   # new fh's should always be set cloexec (due to $^F),", 
        "   # but hey, not on win32, so we always clear the inherit flag.", 
        "   Proc::FastSpawn::fd_inherit (fileno $fh, 0);", 
        "   # quick. also doesn't work in win32. of course. what did you expect", 
        "   #local $ENV{PERL5LIB} = join \":\", grep !ref, @INC;", 
        "   my %env = %ENV;", 
        "   $env{PERL5LIB} = join +($^O eq \"MSWin32\" ? \";\" : \":\"), grep !ref, @INC;", 
        "   my $pid = Proc::FastSpawn::spawn (", 
        "      $PERL,", 
        "      [\"perl\", \"-MAnyEvent::Fork::Serve\", \"-e\", \"AnyEvent::Fork::Serve::me\", fileno $slave, $$],", 
        "      [map \"$_=$env{$_}\", keys %env],", 
        "   ) or die \"unable to spawn AnyEvent::Fork server: $!\";", 
        "   $self->_new ($fh, $pid)", 
        "=item $pid = $proc->pid", 
        "Returns the process id of the process I<iff it is a direct child of the", 
        "process running AnyEvent::Fork>, and C<undef> otherwise. As a general", 
        "rule (that you cannot rely upon), processes created via C<new_exec>,", 
        "L<AnyEvent::Fork::Early> or L<AnyEvent::Fork::Template> are direct", 
        "children, while all other processes are not.", 
        "Or in other words, you do not normally have to take care of zombies for", 
        "processes created via C<new>, but when in doubt, or zombies are a problem,", 
        "you need to check whether a process is a diretc child by calling this", 
        "method, and possibly creating a child watcher or reap it manually.", 
        "sub pid {", 
        "   $_[0][PID]", 
        "=item $proc = $proc->eval ($perlcode, @args)", 
        "Evaluates the given C<$perlcode> as ... Perl code, while setting C<@_> to", 
        "the strings specified by C<@args>, in the \"main\" package.", 
        "This call is meant to do any custom initialisation that might be required", 
        "(for example, the C<require> method uses it). It's not supposed to be used", 
        "to completely take over the process, use C<run> for that.", 
        "The code will usually be executed after this call returns, and there is no", 
        "way to pass anything back to the calling process. Any evaluation errors", 
        "will be reported to stderr and cause the process to exit.", 
        "If you want to execute some code (that isn't in a module) to take over the", 
        "process, you should compile a function via C<eval> first, and then call", 
        "it via C<run>. This also gives you access to any arguments passed via the", 
        "C<send_xxx> methods, such as file handles. See the L<use AnyEvent::Fork as", 
        "a faster fork+exec> example to see it in action.", 
        "Returns the process object for easy chaining of method calls.", 
        "sub eval {", 
        "   my ($self, $code, @args) = @_;", 
        "   $self->_cmd (e => pack \"(w/a*)*\", $code, @args);", 
        "   $self", 
        "=item $proc = $proc->require ($module, ...)", 
        "Tries to load the given module(s) into the process", 
        "Returns the process object for easy chaining of method calls.", 
        "sub require {", 
        "   my ($self, @modules) = @_;", 
        "   s%::%/%g for @modules;", 
        "   $self->eval ('require \"$_.pm\" for @_', @modules);", 
        "   $self", 
        "=item $proc = $proc->send_fh ($handle, ...)", 
        "Send one or more file handles (I<not> file descriptors) to the process,", 
        "to prepare a call to C<run>.", 
        "The process object keeps a reference to the handles until they have", 
        "been passed over to the process, so you must not explicitly close the", 
        "handles. This is most easily accomplished by simply not storing the file", 
        "handles anywhere after passing them to this method - when AnyEvent::Fork", 
        "is finished using them, perl will automatically close them.", 
        "Returns the process object for easy chaining of method calls.", 
        "Example: pass a file handle to a process, and release it without", 
        "closing. It will be closed automatically when it is no longer used.", 
        "   $proc->send_fh ($my_fh);", 
        "   undef $my_fh; # free the reference if you want, but DO NOT CLOSE IT", 
        "sub send_fh {", 
        "   my ($self, @fh) = @_;", 
        "   for my $fh (@fh) {", 
        "      $self->_cmd (\"h\");", 
        "      push @{ $self->[QUEUE] }, \\$fh;", 
        "   $self", 
        "=item $proc = $proc->send_arg ($string, ...)", 
        "Send one or more argument strings to the process, to prepare a call to", 
        "C<run>. The strings can be any octet strings.", 
        "The protocol is optimised to pass a moderate number of relatively short", 
        "strings - while you can pass up to 4GB of data in one go, this is more", 
        "meant to pass some ID information or other startup info, not big chunks of"
    ], 
    "intelmq": [
        {
            "classification_taxonomy": "malicious-code", 
            "classification_type": "infected-system", 
            "feed_provider": "CERT-EE own discovery", 
            "time_source": "2021-08-09T17:56:26.092856+00:00", 
            "feed_name": "CERT-EE own discovery", 
            "ioc": "c82800fecabb67d597209bdc1f35fdd7", 
            "id": "XrO0LHsB_qN_bQnCc-Cj", 
            "index": "imq-2021-08_ajut", 
            "url": "https://kips.cert.ee/app/discover#/doc/imq/imq-2021-08_ajut/?id=XrO0LHsB_qN_bQnCc-Cj", 
            "time_observation": "2021-08-09T20:56:26+00:00", 
            "feed_accuracy": 50
        }, 
        {
            "classification_taxonomy": "malicious-code", 
            "classification_type": "infected-system", 
            "feed_provider": "CERT-EE own discovery", 
            "time_source": "2021-08-09T17:56:26.092736+00:00", 
            "feed_name": "CERT-EE own discovery", 
            "ioc": "c82800fecabb67d597209bdc1f35fdd7", 
            "id": "UrO0LHsB_qN_bQnCbeA7", 
            "index": "imq-2021-08_ajut", 
            "url": "https://kips.cert.ee/app/discover#/doc/imq/imq-2021-08_ajut/?id=UrO0LHsB_qN_bQnCbeA7", 
            "time_observation": "2021-08-09T20:56:26+00:00", 
            "feed_accuracy": 50
        }
    ], 
    "metadata": {
        "output": {
            "pcap": {
                "basename": "dump.pcap", 
                "sha256": "1af6e5706659ff1e33967c3d808c134754dc3fc7f8755670877f0fdf0665bcfd", 
                "dirname": ""
            }
        }
    }
}